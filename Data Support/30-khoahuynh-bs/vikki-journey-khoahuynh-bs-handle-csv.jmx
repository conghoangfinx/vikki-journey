<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="5.0" jmeter="5.6.3">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Vikki Journey">
      <boolProp name="TestPlan.functional_mode">true</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">true</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath">./lib</stringProp>
    </TestPlan>
    <hashTree>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="Defined Variables - UAT">
        <collectionProp name="Arguments.arguments">
          <elementProp name="scheme" elementType="Argument">
            <stringProp name="Argument.name">scheme</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.value">https</stringProp>
          </elementProp>
          <elementProp name="host" elementType="Argument">
            <stringProp name="Argument.name">host</stringProp>
            <stringProp name="Argument.value">ingress-int.uat.galaxyfinx.in</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">UAT</stringProp>
          </elementProp>
          <elementProp name="internalKey" elementType="Argument">
            <stringProp name="Argument.name">internalKey</stringProp>
            <stringProp name="Argument.value">UvzUJdDucBtgFvNxu9F7XzpyA</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="adminKey" elementType="Argument">
            <stringProp name="Argument.name">adminKey</stringProp>
            <stringProp name="Argument.value">yZn7UbifwbvhuNihUsvYOgurk</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="publicKey" elementType="Argument">
            <stringProp name="Argument.name">publicKey</stringProp>
            <stringProp name="Argument.value">GfS39omUfRHReT3G02sSYTIpF</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="hpvOcrMockingId" elementType="Argument">
            <stringProp name="Argument.name">hpvOcrMockingId</stringProp>
            <stringProp name="Argument.value">d596264e-f918-4e4a-a7ee-1423481f18f8</stringProp>
            <stringProp name="Argument.desc">Wiremock ID</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="hdbBiometricMockingId" elementType="Argument">
            <stringProp name="Argument.name">hdbBiometricMockingId</stringProp>
            <stringProp name="Argument.value">bf3e65fb-4fc0-4cea-bccc-d4c906744ea3</stringProp>
            <stringProp name="Argument.desc">Wiremock ID</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="phoneNumberOnboard" elementType="Argument">
            <stringProp name="Argument.name">phoneNumberOnboard</stringProp>
            <stringProp name="Argument.value"></stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">Prefix must 9900</stringProp>
          </elementProp>
          <elementProp name="idNumberOnboard" elementType="Argument">
            <stringProp name="Argument.name">idNumberOnboard</stringProp>
            <stringProp name="Argument.value"></stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc"></stringProp>
          </elementProp>
        </collectionProp>
      </Arguments>
      <hashTree/>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="Defined Variables - SIT" enabled="false">
        <collectionProp name="Arguments.arguments">
          <elementProp name="scheme" elementType="Argument">
            <stringProp name="Argument.name">scheme</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.value">https</stringProp>
          </elementProp>
          <elementProp name="host" elementType="Argument">
            <stringProp name="Argument.name">host</stringProp>
            <stringProp name="Argument.value">ingress-int.sit.galaxyfinx.in</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">UAT</stringProp>
          </elementProp>
          <elementProp name="internalKey" elementType="Argument">
            <stringProp name="Argument.name">internalKey</stringProp>
            <stringProp name="Argument.value">hF35bcI4A2g6JUb4lrs0cvM5t</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="adminKey" elementType="Argument">
            <stringProp name="Argument.name">adminKey</stringProp>
            <stringProp name="Argument.value">5jrEGY49i8OV8tmEOC5euLQW6</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="publicKey" elementType="Argument">
            <stringProp name="Argument.name">publicKey</stringProp>
            <stringProp name="Argument.value">uX6YVolBtq4lEOsFBYitJrR8B</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="hpvOcrMockingId" elementType="Argument">
            <stringProp name="Argument.name">hpvOcrMockingId</stringProp>
            <stringProp name="Argument.value">d596264e-f918-4e4a-a7ee-1423481f18f8</stringProp>
            <stringProp name="Argument.desc">Wiremock ID</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="hdbBiometricMockingId" elementType="Argument">
            <stringProp name="Argument.name">hdbBiometricMockingId</stringProp>
            <stringProp name="Argument.value">bf3e65fb-4fc0-4cea-bccc-d4c906744ea3</stringProp>
            <stringProp name="Argument.desc">Wiremock ID</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="phoneNumberOnboard" elementType="Argument">
            <stringProp name="Argument.name">phoneNumberOnboard</stringProp>
            <stringProp name="Argument.value"></stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">Prefix must 9900</stringProp>
          </elementProp>
          <elementProp name="idNumberOnboard" elementType="Argument">
            <stringProp name="Argument.name">idNumberOnboard</stringProp>
            <stringProp name="Argument.value"></stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc"></stringProp>
          </elementProp>
        </collectionProp>
      </Arguments>
      <hashTree/>
      <ConfigTestElement guiclass="HttpDefaultsGui" testclass="ConfigTestElement" testname="HTTP Request Defaults">
        <intProp name="HTTPSampler.connect_timeout">50000</intProp>
        <intProp name="HTTPSampler.response_timeout">50000</intProp>
        <stringProp name="HTTPSampler.domain">${host}</stringProp>
        <stringProp name="HTTPSampler.port">443</stringProp>
        <stringProp name="HTTPSampler.protocol">${scheme}</stringProp>
        <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
          <collectionProp name="Arguments.arguments"/>
        </elementProp>
        <stringProp name="HTTPSampler.implementation"></stringProp>
      </ConfigTestElement>
      <hashTree/>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Onboarding">
        <stringProp name="ThreadGroup.num_threads">${__P(threads,1)}</stringProp>
        <stringProp name="ThreadGroup.ramp_time">${__P(rampups, 20 )}</stringProp>
        <stringProp name="ThreadGroup.duration">${__P(durations,600)}</stringProp>
        <longProp name="ThreadGroup.delay">5</longProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">false</boolProp>
        <stringProp name="ThreadGroup.on_sample_error">stoptestnow</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller">
          <stringProp name="LoopController.loops">1</stringProp>
          <boolProp name="LoopController.continue_forever">false</boolProp>
        </elementProp>
      </ThreadGroup>
      <hashTree>
        <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="GENERATE PHONE AND ID NUMBER - Single" enabled="false">
          <stringProp name="scriptLanguage">groovy</stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="script">import java.text.SimpleDateFormat
import java.util.Random

//log.info(&quot;\n---------- GENERATE PHONE AND ID NUMBER ----------&quot;)

// ✅ Lấy biến __threadNum, đảm bảo giá trị không null và kiểu số nguyên
def threadNum = ${__threadNum}  // Tránh null, đảm bảo số nguyên

// ✅ Lấy thời gian hiện tại với các định dạng mong muốn
def currentDate = new Date()
def dateFormatSSddMMHHmm = new SimpleDateFormat(&quot;ssddMMHHmm&quot;)  // Định dạng giây - ngày - tháng - giờ - phút
def dateFormatHHmm = new SimpleDateFormat(&quot;HHmm&quot;)  // Định dạng HHmm (giờ, phút)
def dateFormatss = new SimpleDateFormat(&quot;ss&quot;)  // Định dạng ssHHmm (giây)
def formattedDate = dateFormatSSddMMHHmm.format(currentDate)  // Ngày tháng năm giờ phút
def formattedTimeHHmm = dateFormatHHmm.format(currentDate)  // Giờ phút hiện tại
def formattedTimess = dateFormatss.format(currentDate)  // Giờ phút hiện tại

// ✅ Sinh ra 2 số ngẫu nhiên cho idNumberOnboard
Random rand = new Random()
def randomPart = String.format(&quot;%02d&quot;, rand.nextInt(100))  // 2 số ngẫu nhiên từ 00 - 99

// ✅ Kiểm tra và tạo số điện thoại nếu chưa có giá trị
//def phoneNumberOnboard = vars.get(&quot;phoneNumberOnboard&quot;) ?: &quot;990&quot; + randomPart + formattedTimeHHmm
//def phoneNumberOnboard = vars.get(&quot;phoneNumberOnboard&quot;) ?: &quot;990&quot; + String.format(&quot;%02d&quot;, threadNum) + formattedTimeHHmm
def phoneNumberOnboard = vars.get(&quot;phoneNumberOnboard&quot;) ?: &quot;990&quot; + formattedTimess + formattedTimeHHmm

// ✅ Kiểm tra và tạo số căn cước nếu chưa có giá trị
def idNumberOnboard = vars.get(&quot;idNumberOnboard&quot;) ?: String.format(&quot;%02d&quot;, threadNum) + formattedDate
//def idNumberOnboard = vars.get(&quot;idNumberOnboard&quot;) ?: randomPart + formattedDate

// ✅ Gán lại giá trị vào biến JMeter
vars.put(&quot;phoneNumberOnboard&quot;, phoneNumberOnboard)
vars.put(&quot;idNumberOnboard&quot;, idNumberOnboard)

</stringProp>
        </JSR223PreProcessor>
        <hashTree/>
        <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="GENERATE PHONE AND ID NUMBER - Multiple" enabled="false">
          <stringProp name="scriptLanguage">groovy</stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="script">import java.text.SimpleDateFormat
import java.util.Random

//log.info(&quot;\n---------- GENERATE PHONE AND ID NUMBER ----------&quot;)

// ✅ Lấy biến __threadNum, đảm bảo giá trị không null và kiểu số nguyên
def threadNum = ${__threadNum}  // Tránh null, đảm bảo số nguyên

// ✅ Lấy thời gian hiện tại với các định dạng mong muốn
def currentDate = new Date()
def dateFormatSSddMMHHmm = new SimpleDateFormat(&quot;ssddMMHHmm&quot;)  // Định dạng giây - ngày - tháng - giờ - phút
def dateFormatHHmm = new SimpleDateFormat(&quot;HHmm&quot;)  // Định dạng HHmm (giờ, phút)
def dateFormatss = new SimpleDateFormat(&quot;ss&quot;)  // Định dạng ssHHmm (giây)
def formattedDate = dateFormatSSddMMHHmm.format(currentDate)  // Ngày tháng năm giờ phút
def formattedTimeHHmm = dateFormatHHmm.format(currentDate)  // Giờ phút hiện tại
def formattedTimess = dateFormatss.format(currentDate)  // Giờ phút hiện tại

// ✅ Sinh ra 2 số ngẫu nhiên cho idNumberOnboard
Random rand = new Random()
def randomPart = String.format(&quot;%02d&quot;, rand.nextInt(100))  // 2 số ngẫu nhiên từ 00 - 99

// ✅ Kiểm tra và tạo số điện thoại nếu chưa có giá trị
//def phoneNumberOnboard = vars.get(&quot;phoneNumberOnboard&quot;) ?: &quot;990&quot; + randomPart + formattedTimeHHmm
//def phoneNumberOnboard = vars.get(&quot;phoneNumberOnboard&quot;) ?: &quot;990&quot; + String.format(&quot;%02d&quot;, threadNum) + formattedTimeHHmm
def phoneNumberOnboard = vars.get(&quot;phoneNumberOnboard&quot;) ?: &quot;990&quot; + formattedTimess + formattedTimeHHmm

// ✅ Kiểm tra và tạo số căn cước nếu chưa có giá trị
def idNumberOnboard = vars.get(&quot;idNumberOnboard&quot;) ?: String.format(&quot;%02d&quot;, threadNum) + formattedDate
//def idNumberOnboard = vars.get(&quot;idNumberOnboard&quot;) ?: randomPart + formattedDate

// ✅ Gán lại giá trị vào biến JMeter
vars.put(&quot;phoneNumberOnboard&quot;, phoneNumberOnboard)
vars.put(&quot;idNumberOnboard&quot;, idNumberOnboard)

</stringProp>
        </JSR223PreProcessor>
        <hashTree/>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
          <stringProp name="delimiter">,</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="filename">/Users/conghoang/Desktop/test-csv.csv</stringProp>
          <boolProp name="ignoreFirstLine">true</boolProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
          <boolProp name="stopThread">false</boolProp>
          <stringProp name="variableNames">fullName,phoneNumberOnboard,idNumberOnboard</stringProp>
        </CSVDataSet>
        <hashTree/>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="0. Clear Card" enabled="true">
          <stringProp name="IfController.condition">true</stringProp>
          <boolProp name="IfController.evaluateAll">false</boolProp>
          <boolProp name="IfController.useExpression">true</boolProp>
        </IfController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Tìm Lead và Xóa" enabled="true">
            <stringProp name="HTTPSampler.domain">113.161.76.226</stringProp>
            <stringProp name="HTTPSampler.port">8087</stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.path">/hdb-lead-card-management/api/lead/find_lead</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
    &quot;inputData&quot;: [&#xd;
        &quot;${idNumberOnboard}&quot;&#xd;
    ],&#xd;
    &quot;searchLeadDetailMethod&quot;: &quot;NATIONAL_ID&quot;&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">x-api-key</stringProp>
                  <stringProp name="Header.value">szt995RHr033WwY616SWj831YAS346bK</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">log.info(&quot; \n ---------- SEARCH CARD LEAD AND DELETE ----------&quot;);

import groovy.json.JsonSlurper;
import org.apache.jmeter.samplers.SampleResult;
import org.apache.jmeter.protocol.http.sampler.HTTPSamplerProxy;
import org.apache.jmeter.protocol.http.control.HeaderManager;
import org.apache.jmeter.protocol.http.control.Header;
import org.apache.jmeter.threads.JMeterContext;

// ✅ Lấy thông tin từ request trước đó
def responseTime = prev.getTime(); // Response time in milliseconds
def requestUrl = prev.getURL().toString(); // Lấy URL của request

// ✅ Log thông tin cơ bản về request để hỗ trợ trace issue
log.info(requestUrl + &quot; | &quot; + responseTime + &quot;ms&quot;);

// ✅ Lấy response JSON từ request trước đó
def response = prev.getResponseDataAsString().trim();
def jsonSlurper = new JsonSlurper();
def jsonResponse;

// ✅ Parse JSON an toàn
try {
    jsonResponse = jsonSlurper.parseText(response);
} catch (Exception e) {
    log.error(&quot;❌ Lỗi parse JSON: &quot; + e.getMessage());
    log.error(&quot; Full Response: \n&quot; + response);
    return;
}

// ✅ Kiểm tra nếu có leads trong response
if (jsonResponse?.leads?.size() &gt; 0) {
    def leadIds = jsonResponse.leads.collect { it.leadId };
    vars.put(&quot;leadIds&quot;, leadIds.join(&quot;,&quot;)); // Lưu danh sách leadId vào biến JMeter
    
    log.info(&quot;🔹 Danh sách leadIds đã trích xuất: &quot; + leadIds);

    // ✅ Gửi yêu cầu xóa từng leadId
    leadIds.each { leadId -&gt;
        log.info(&quot;🛑 Đang gửi yêu cầu xóa leadId: &quot; + leadId);
        
        // ✅ Tạo HTTP Sampler để gửi request động
        def sampler = new HTTPSamplerProxy();
        sampler.setDomain(&quot;113.161.76.226&quot;);
        sampler.setPort(8087);
        sampler.setProtocol(&quot;http&quot;);
        sampler.setPath(&quot;/hdb-lead-card-management/api/lead/remove_lead&quot;);
        sampler.setMethod(&quot;PUT&quot;);
        
        // ✅ Thiết lập Header Manager
        def headerManager = new HeaderManager();
        headerManager.add(new Header(&quot;Content-Type&quot;, &quot;application/json&quot;));
        headerManager.add(new Header(&quot;x-api-key&quot;, &quot;szt995RHr033WwY616SWj831YAS346bK&quot;));
        sampler.setHeaderManager(headerManager);

        // ✅ Thiết lập Body
        def requestBody = &apos;{&quot;leads&quot;: [&quot;&apos; + leadId + &apos;&quot;]}&apos;;
        sampler.addNonEncodedArgument(&quot;&quot;, requestBody, &quot;&quot;);
        sampler.setPostBodyRaw(true);

        // ✅ Gửi request bằng SampleResult
        def sampleResult = sampler.sample();
        
        // ✅ Ghi log kết quả
        log.info(&quot; Request: DELETE Lead ID: &quot; + leadId);
        log.info(&quot; Response Code: &quot; + sampleResult.getResponseCode());
        log.info(&quot; Response Message: &quot; + sampleResult.getResponseMessage());

        if (sampleResult.getResponseCode() != &quot;200&quot;) {
            log.warn(&quot;❌ Lỗi khi xóa leadId: &quot; + leadId + &quot; | Response: &quot; + sampleResult.getResponseDataAsString());
        } else {
            log.info(&quot;✅ Đã xóa thành công leadId: &quot; + leadId);
        }
    }
} else {
    log.warn(&quot;✅ Không có lead nào được tìm thấy!&quot;);
}</stringProp>
            </JSR223PostProcessor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Tìm và Đóng CIF WAY4" enabled="true">
            <stringProp name="HTTPSampler.domain">113.161.76.226</stringProp>
            <stringProp name="HTTPSampler.port">8087</stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.path">/hdb-lead-card-management/api/client/get_client_by_identity_card_number?idCard=${idNumberOnboard}</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">log.info(&quot; \n ---------- SEARCH CARD WAY4 AND DELETE ----------&quot;);

import groovy.json.JsonSlurper;
import org.apache.jmeter.samplers.SampleResult;
import org.apache.jmeter.protocol.http.sampler.HTTPSamplerProxy;
import org.apache.jmeter.protocol.http.control.HeaderManager;
import org.apache.jmeter.protocol.http.control.Header;
import org.apache.jmeter.threads.JMeterContext;


// ✅ Lấy thông tin từ request trước đó
def responseTime = prev.getTime(); // Response time in milliseconds
def requestUrl = prev.getURL().toString(); // Lấy URL của request

// ✅ Log thông tin cơ bản về request để hỗ trợ trace issue
log.info(requestUrl + &quot; | &quot; + responseTime + &quot;ms&quot;);

// ✅ Lấy response JSON từ request trước đó
def response = prev.getResponseDataAsString().trim();
def jsonSlurper = new JsonSlurper();
def jsonResponse;

// ✅ Parse JSON an toàn
try {
    jsonResponse = jsonSlurper.parseText(response);
} catch (Exception e) {
    log.error(&quot;❌ Lỗi parse JSON: &quot; + e.getMessage());
    log.error(&quot; Full Response: \n&quot; + response);
    return;
}

// ✅ Kiểm tra nếu có dữ liệu `way4Clients` trong response
if (jsonResponse?.way4Clients?.size() &gt; 0) {
    def clientIds = jsonResponse.way4Clients.collect { it.id };
    vars.put(&quot;clientIds&quot;, clientIds.join(&quot;,&quot;)); // Lưu danh sách clientId vào biến JMeter
    
    log.info(&quot;🔹 Danh sách clientIds đã trích xuất: &quot; + clientIds);

    // ✅ Gửi yêu cầu DELETE từng clientId
    clientIds.each { clientId -&gt;
        log.info(&quot;🛑 Đang gửi yêu cầu xóa clientId: &quot; + clientId);
        
        // ✅ Tạo HTTP Sampler cho từng request DELETE
        def sampler = new HTTPSamplerProxy();
        sampler.setDomain(&quot;113.161.76.226&quot;);
        sampler.setPort(8087);
        sampler.setProtocol(&quot;http&quot;);
        sampler.setPath(&quot;/hdb-lead-card-management/api/client/close_way4_cif?clientId=&quot; + clientId);
        sampler.setMethod(&quot;DELETE&quot;);

        // ✅ Thiết lập Header Manager
        def headerManager = new HeaderManager();
        headerManager.add(new Header(&quot;x-api-key&quot;, &quot;szt995RHr033WwY616SWj831YAS346bK&quot;));
        sampler.setHeaderManager(headerManager);

        // ✅ Gửi request bằng SampleResult
        def sampleResult = sampler.sample();
        
        // ✅ Ghi log kết quả
        log.info(&quot; Request: DELETE clientId: &quot; + clientId);
        log.info(&quot; Response Code: &quot; + sampleResult.getResponseCode());
        log.info(&quot; Response Message: &quot; + sampleResult.getResponseMessage());

        if (sampleResult.getResponseCode() != &quot;200&quot;) {
            log.warn(&quot;❌ Lỗi khi xóa clientId: &quot; + clientId + &quot; | Response: &quot; + sampleResult.getResponseDataAsString());
        } else {
            log.info(&quot;✅ Đã xóa thành công clientId: &quot; + clientId);
        }
    }
} else {
    log.warn(&quot;✅ Không có client-ID nào trong way4Clients!&quot;);
}</stringProp>
            </JSR223PostProcessor>
            <hashTree/>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">x-api-key</stringProp>
                  <stringProp name="Header.value">szt995RHr033WwY616SWj831YAS346bK</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
        </hashTree>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="1. Check and Clear Account" enabled="true">
          <stringProp name="IfController.condition">${__groovy(vars.get(&quot;phoneNumberOnboard&quot;) != null)}</stringProp>
          <boolProp name="IfController.evaluateAll">false</boolProp>
          <boolProp name="IfController.useExpression">true</boolProp>
        </IfController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="1.1 NID - Get Prospect" enabled="true">
            <intProp name="HTTPSampler.concurrentPool">6</intProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/v2/prospect/internal/lookup</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
    &quot;type&quot;: &quot;national_id&quot;,&#xd;
    &quot;value&quot;: &quot;${idNumberOnboard}&quot;&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">X-KEY</stringProp>
                  <stringProp name="Header.value">${publicKey}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">import groovy.json.JsonSlurper

log.info(&quot;\n\n=============== !!! CHECK AND CLEAR ACCOUNT !!! ===============\n\n&quot;);
log.info(&quot;\n 1.1 ---------- NID - GET PROSPECT ----------&quot;)

// ✅ Lấy thông tin từ request trước đó
def response = prev.getResponseDataAsString().trim()
def responseCode = prev.getResponseCode().toString()
def responseMessage = prev.getResponseMessage()
def responseTime = prev.getTime()

// ✅ Log thông tin cơ bản về request
log.info(&quot;${prev.getURL()} | ${responseTime}ms&quot;)

// ✅ Kiểm tra response code và log lỗi nếu không phải 200
if (responseCode != &quot;200&quot;) {
    log.error(&quot;❌ API Error! Response Code: ${responseCode} | Message: ${responseMessage}&quot;)
    log.error(&quot;Full Response: \n${response}&quot;)
    return
}

// ✅ Parse JSON an toàn
def jsonResponse
try {
    jsonResponse = new JsonSlurper().parseText(response)
} catch (Exception e) {
    log.error(&quot;❌ Error parsing JSON: ${e.message}&quot;)
    log.error(&quot;Full Response: \n${response}&quot;)
    return
}

// ✅ Trích xuất và log thông tin cần thiết
def phoneNumber = jsonResponse?.payload?.phoneNumber
def prospectId = jsonResponse?.payload?.idCardFront?.imageName?.split(&apos;_&apos;)?.first()

// Log Prospect ID nếu tìm thấy
if (prospectId) {
    vars.put(&quot;prospectIdOfNID&quot;, prospectId)
//    log.info(&quot;✅ ProspectID of NID: ${prospectId}&quot;)
} else {
    log.warn(&quot;✅ Prospect ID not found!&quot;)
}

// Log phoneNumber nếu tìm thấy
if (phoneNumber) {
    vars.put(&quot;phoneNumberOfNIDOld&quot;, phoneNumber.toString())
    log.info(&quot;✅ Phone of NID: ${phoneNumber}&quot;)
} else {
    log.warn(&quot;✅ Phone number not found in NID prospect&quot;)
}
</stringProp>
            </JSR223PostProcessor>
            <hashTree/>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="1.2 NID - Clear Prospect" enabled="true">
            <stringProp name="IfController.condition">${__groovy(
    def prospectIdOfNID = vars.get(&quot;prospectIdOfNID&quot;)
    if (prospectIdOfNID != null) {
        return true
    } else {
        return false
    }
)}</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
            <boolProp name="IfController.useExpression">true</boolProp>
          </IfController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="1.2 Clear Prospect of NID" enabled="true">
              <stringProp name="HTTPSampler.path">/v2/onboarding/admin/prospect/${prospectIdOfNID}/clean-prospect</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;removeAllFaces&quot;: true&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">X-KEY</stringProp>
                    <stringProp name="Header.value">${adminKey}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">secret-key</stringProp>
                    <stringProp name="Header.value">izyMW6MEhhjN0KQfjyb11DwM9XuJyYU6</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">import groovy.json.JsonSlurper

log.info(&quot;\n 1.2 ---------- NID - CLEAR PROSPECT ----------&quot;)

// ✅ Lấy thông tin từ request trước đó
def response = prev.getResponseDataAsString().trim()
def responseCode = prev.getResponseCode().toString()
def responseMessage = prev.getResponseMessage()
def responseTime = prev.getTime()

// ✅ Log thông tin cơ bản
log.info(&quot;${prev.getURL()} | ${responseTime}ms&quot;)

// ✅ Kiểm tra và log nếu response code là 400 (Prospect not found)
if (responseCode == &quot;400&quot;) {
    def jsonResponse = new JsonSlurper().parseText(response)
    log.warn(&quot;❌ Prospect of NID not found!&quot;)
    return false // Dừng nếu không tìm thấy prospect
}

// ✅ Kiểm tra và log nếu response code là 200 (Clear Success)
if (responseCode == &quot;200&quot;) {
    def jsonResponse = new JsonSlurper().parseText(response)
    if (jsonResponse.success == true) {
        log.info(&quot;✅ Prospect of NID has been successfully cleared!&quot;)
    } else {
        log.warn(&quot;❌ Clear Prospect of NID failed! Response Message: ${jsonResponse.status.message}&quot;)
    }
    return true // Thành công
}

// ✅ Kiểm tra và log các lỗi khác (500, 502, etc.)
if (responseCode != &quot;200&quot; &amp;&amp; responseCode != &quot;400&quot;) {
    log.error(&quot;❌ Unexpected Error! Response Code: ${responseCode} | Message: ${responseMessage}&quot;)
    log.error(&quot;Full Response: \n${response}&quot;)
    return false // Dừng nếu có lỗi khác
}

return true // Đảm bảo trả về true nếu không có lỗi nào
</stringProp>
              </JSR223PostProcessor>
              <hashTree/>
            </hashTree>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="1.3 NID - Get CIF" enabled="true">
            <intProp name="HTTPSampler.concurrentPool">6</intProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/api/party-service/v2/admin/parties/lookup</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
    &quot;type&quot;: &quot;national_id&quot;,&#xd;
    &quot;value&quot;: &quot;${idNumberOnboard}&quot;,&#xd;
    &quot;queryParams&quot;: [&quot;cif&quot;]&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="x-request-id" elementType="Header">
                  <stringProp name="Header.name">x-request-id</stringProp>
                  <stringProp name="Header.value">dcb51815-7759-41d8-8fd6-46b32e241acf</stringProp>
                </elementProp>
                <elementProp name="gtw-authorization" elementType="Header">
                  <stringProp name="Header.name">gtw-authorization</stringProp>
                  <stringProp name="Header.value"></stringProp>
                </elementProp>
                <elementProp name="baggage" elementType="Header">
                  <stringProp name="Header.name">baggage</stringProp>
                  <stringProp name="Header.value">sentry-environment=uat,sentry-transaction=StartupScreen,sentry-public_key=a8650128baf78c0abc77876f8736238f,sentry-trace_id=ae79a0eed0354e439ab2d6820a04d617,sentry-sample_rate=0.85</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-GB,en-US;q=0.9,en;q=0.8</stringProp>
                </elementProp>
                <elementProp name="sentry-trace" elementType="Header">
                  <stringProp name="Header.name">sentry-trace</stringProp>
                  <stringProp name="Header.value">ae79a0eed0354e439ab2d6820a04d617-ae34fb51315f7476-1</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                </elementProp>
                <elementProp name="x-open-id" elementType="Header">
                  <stringProp name="Header.name">x-open-id</stringProp>
                  <stringProp name="Header.value">7b0e270b-c4f4-4cc4-826c-f324bd2d6684</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Vikki%20Uat/1698985660 CFNetwork/1410.0.3 Darwin/22.6.0</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">X-KEY</stringProp>
                  <stringProp name="Header.value">${adminKey}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">import groovy.json.JsonSlurper

log.info(&quot;\n 1.3 ---------- NID - GET CIF ----------&quot;)

// ✅ Lấy thông tin từ response trước đó
def response = prev.getResponseDataAsString()?.trim() // Kiểm tra null tránh lỗi
def responseCode = prev.getResponseCode()?.toString()
def responseMessage = prev.getResponseMessage()
def responseTime = prev.getTime()

// ✅ Log thông tin cơ bản của request
log.info(&quot;${prev.getURL()} | ${responseTime}ms&quot;)

// ✅ Kiểm tra nếu response code là 400 (Not Found)
if (responseCode == &quot;400&quot;) {
    prev.setResponseOK() // Đánh dấu request thành công dù không tìm thấy dữ liệu
    log.warn(&quot;✅ Not Found ID Number Party.&quot;)
    return
}

// ✅ Kiểm tra và log nếu response code khác 200 (lỗi ngoài mong đợi)
if (responseCode != &quot;200&quot;) {
    log.error(&quot;❌ API Error! Response Code: ${responseCode} | Message: ${responseMessage}&quot;)
    log.error(&quot;Full Response: \n${response}&quot;)
    return
}

// ✅ Parse JSON an toàn
def jsonResponse
try {
    jsonResponse = new JsonSlurper().parseText(response) // Parse response JSON
} catch (Exception e) {
    log.error(&quot;❌ JSON Parsing Error: ${e.message}&quot;)
    log.error(&quot;Full Response: \n${response}&quot;)
    return
}

// ✅ Trích xuất thông tin tài khoản
def statusAccount = jsonResponse?.payload?.status ?: &quot;UNKNOWN&quot; // Mặc định &quot;UNKNOWN&quot;
def cifNumberOfNID = jsonResponse?.payload?.cif ?: &quot;N/A&quot; // Mặc định &quot;N/A&quot;

// ✅ Lưu giá trị vào biến JMeter
vars.put(&quot;cifNumberOfNID&quot;, cifNumberOfNID) 
vars.put(&quot;statusAccount&quot;, statusAccount)


// ✅ Log thông tin tài khoản
log.info(&quot;✅ CIF of NID: ${cifNumberOfNID} | Status: ${statusAccount}&quot;)</stringProp>
            </JSR223PostProcessor>
            <hashTree/>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="1.4 NID - Clear CIF" enabled="true">
            <stringProp name="IfController.condition">${__groovy(vars.get(&apos;statusAccount&apos;) == &apos;Active&apos;)}</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
            <boolProp name="IfController.useExpression">true</boolProp>
          </IfController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="1.4 Clear CIF of NID" enabled="true">
              <stringProp name="HTTPSampler.path">/api/party-service/v2/admin/parties/deactivate-customer</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">PATCH</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
    &quot;customerCifNumber&quot;: &quot;${cifNumberOfNID}&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name"></stringProp>
                    <stringProp name="Header.value"></stringProp>
                  </elementProp>
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">X-KEY</stringProp>
                    <stringProp name="Header.value">${adminKey}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">import groovy.json.JsonSlurper

log.info(&quot;\n 1.4 ---------- NID - CLEAR CIF ----------&quot;)

// ✅ Lấy thông tin từ response trước đó
def responseCode = prev.getResponseCode()?.toString()
def responseMessage = prev.getResponseMessage()
def responseTime = prev.getTime()
def requestUrl = prev.getURL().toString()

// ✅ Log thông tin cơ bản của request
log.info(&quot;${requestUrl} | ${responseTime}ms&quot;)

// ✅ Kiểm tra nếu response code là 400 (Not Found)
if (responseCode == &quot;400&quot;) {
    prev.setResponseOK() // Đánh dấu request thành công dù không tìm thấy dữ liệu
    log.warn(&quot;❌️ Not Found ID Number Party.&quot;)
    return
}

// ✅ Kiểm tra và log nếu response code khác 200 (lỗi ngoài mong đợi)
if (responseCode != &quot;200&quot;) {
    log.error(&quot;❌ API Error! Response Code: ${responseCode} | Message: ${responseMessage}&quot;)
    return
}

// ✅ Nếu API thành công, log xác nhận đã xoá CIF thành công
log.info(&quot;✅ Clear cifNumber of ID Number in Party Success!&quot;)
</stringProp>
              </JSR223PostProcessor>
              <hashTree/>
            </hashTree>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="1.5 Phone - Get Prospect" enabled="true">
            <intProp name="HTTPSampler.concurrentPool">6</intProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/v2/prospect</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
    &quot;phoneNumber&quot;: &quot;+84${phoneNumberOnboard}&quot;&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">X-KEY</stringProp>
                  <stringProp name="Header.value">${publicKey}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">x-request-id</stringProp>
                  <stringProp name="Header.value">dcb51815-7759-41d8-8fd6-46b32e241acf</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">import groovy.json.JsonSlurper

log.info(&quot;\n 1.5 ---------- PHONE - GET PROSPECT ----------&quot;)

// ✅ Lấy thông tin từ response trước đó
def response = prev.getResponseDataAsString()?.trim()
def responseCode = prev.getResponseCode()?.toString()
def responseMessage = prev.getResponseMessage()
def responseTime = prev.getTime()

// ✅ Log thông tin cơ bản của request
log.info(&quot;${prev.getURL()} | ${responseTime}ms&quot;)

// ✅ Kiểm tra nếu response code là 400 (Không tìm thấy prospect)
if (responseCode == &quot;400&quot;) {
    prev.setResponseOK() // Đánh dấu request thành công dù không tìm thấy dữ liệu
    log.warn(&quot;✅ Not Found Prospect from Phone Number.&quot;)
    return
}

// ✅ Kiểm tra và log nếu response code khác 200 (lỗi ngoài mong đợi)
if (responseCode != &quot;200&quot;) {
    log.error(&quot;❌ API Error! Response Code: ${responseCode} | Message: ${responseMessage}&quot;)
    log.error(&quot;Full Response: \n${response}&quot;)
    return
}

// ✅ Parse JSON an toàn
def jsonResponse
try {
    jsonResponse = new JsonSlurper().parseText(response)
} catch (Exception e) {
    log.error(&quot;❌ JSON Parsing Error: ${e.message}&quot;)
    log.error(&quot;Full Response: \n${response}&quot;)
    return
}

// ✅ Trích xuất prospectId từ payload
def prospectIdPhone = jsonResponse?.payload?.prospectId ?: null

if (prospectIdPhone) {
    vars.put(&quot;prospectIdOfPhone&quot;, prospectIdPhone.toString())
    log.info(&quot;✅ ProspectID of Phone: ${prospectIdPhone}&quot;)
}</stringProp>
            </JSR223PostProcessor>
            <hashTree/>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="1.6 Phone - Clear Prospect" enabled="true">
            <stringProp name="IfController.condition">${__groovy(vars.get(&quot;prospectIdOfPhone&quot;) != null )}</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
            <boolProp name="IfController.useExpression">true</boolProp>
          </IfController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname=" 1.6 Clear Prospect of Phone" enabled="true">
              <stringProp name="HTTPSampler.path">/v2/onboarding/admin/prospect/${prospectIdOfPhone}/clean-prospect</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;removeAllFaces&quot;: true&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">X-KEY</stringProp>
                    <stringProp name="Header.value">${adminKey}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">secret-key</stringProp>
                    <stringProp name="Header.value">izyMW6MEhhjN0KQfjyb11DwM9XuJyYU6</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">import groovy.json.JsonSlurper

log.info(&quot;\n 1.6 ---------- CLEAR PROSPECT OF PHONE ----------&quot;)

// ✅ Lấy thông tin từ response trước đó
def response = prev.getResponseDataAsString()?.trim()
def responseCode = prev.getResponseCode()?.toString()
def responseMessage = prev.getResponseMessage()
def responseTime = prev.getTime()

// ✅ Log thông tin cơ bản của request
log.info(&quot;${prev.getURL()} | ${responseTime}ms&quot;)

// ✅ Kiểm tra nếu response code là 400 (Không tìm thấy prospect)
if (responseCode == &quot;400&quot;) {
    prev.setResponseOK() // Đánh dấu request thành công dù không tìm thấy dữ liệu
    log.warn(&quot;⚠️ Not Found Prospect from Phone Number (Response 400).&quot;)
    return
}

// ✅ Kiểm tra và log nếu response code khác 200 (lỗi ngoài mong đợi)
if (responseCode != &quot;200&quot;) {
    log.error(&quot;❌ API Error! Response Code: ${responseCode} | Message: ${responseMessage}&quot;)
    return
}

// ✅ Nếu API thành công, log kết quả
log.info(&quot;✅ Clear Prospect of Phone Success!&quot;)</stringProp>
              </JSR223PostProcessor>
              <hashTree/>
            </hashTree>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="1.7 Phone - Get CIF" enabled="true">
            <intProp name="HTTPSampler.concurrentPool">6</intProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/api/party-service/v2/admin/parties/lookup</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
    &quot;type&quot;: &quot;onboard_phone_number&quot;,&#xd;
    &quot;value&quot;: &quot;+84${phoneNumberOnboard}&quot;,&#xd;
    &quot;queryParams&quot;: [&quot;cif&quot;]&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="x-request-id" elementType="Header">
                  <stringProp name="Header.name">x-request-id</stringProp>
                  <stringProp name="Header.value">dcb51815-7759-41d8-8fd6-46b32e241acf</stringProp>
                </elementProp>
                <elementProp name="gtw-authorization" elementType="Header">
                  <stringProp name="Header.name">gtw-authorization</stringProp>
                  <stringProp name="Header.value"></stringProp>
                </elementProp>
                <elementProp name="baggage" elementType="Header">
                  <stringProp name="Header.name">baggage</stringProp>
                  <stringProp name="Header.value">sentry-environment=uat,sentry-transaction=StartupScreen,sentry-public_key=a8650128baf78c0abc77876f8736238f,sentry-trace_id=ae79a0eed0354e439ab2d6820a04d617,sentry-sample_rate=0.85</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-GB,en-US;q=0.9,en;q=0.8</stringProp>
                </elementProp>
                <elementProp name="sentry-trace" elementType="Header">
                  <stringProp name="Header.name">sentry-trace</stringProp>
                  <stringProp name="Header.value">ae79a0eed0354e439ab2d6820a04d617-ae34fb51315f7476-1</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                </elementProp>
                <elementProp name="x-open-id" elementType="Header">
                  <stringProp name="Header.name">x-open-id</stringProp>
                  <stringProp name="Header.value">7b0e270b-c4f4-4cc4-826c-f324bd2d6684</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Vikki%20Uat/1698985660 CFNetwork/1410.0.3 Darwin/22.6.0</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">X-KEY</stringProp>
                  <stringProp name="Header.value">${adminKey}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">import groovy.json.JsonSlurper

log.info(&quot;\n 1.7 ---------- PHONE - GET CIF ----------&quot;)

// ✅ Lấy thông tin từ response trước đó
def response = prev.getResponseDataAsString()?.trim() // Kiểm tra null tránh lỗi
def responseCode = prev.getResponseCode()?.toString()
def responseMessage = prev.getResponseMessage()
def responseTime = prev.getTime()

// ✅ Log thông tin cơ bản của request
log.info(&quot;${prev.getURL()} | ${responseTime}ms&quot;)

// ✅ Kiểm tra nếu response code là 400 (Không tìm thấy Phone Number Party)
if (responseCode == &quot;400&quot;) {
    prev.setResponseOK() // Đánh dấu request thành công dù không tìm thấy dữ liệu
    log.warn(&quot;✅ Not Found Phone Number Party.&quot;)
    return
}

// ✅ Kiểm tra và log nếu response code khác 200 (lỗi ngoài mong đợi)
if (responseCode != &quot;200&quot;) {
    log.error(&quot;❌ API Error! Response Code: ${responseCode} | Message: ${responseMessage}&quot;)
    log.error(&quot;Full Response: \n${response}&quot;)
    return
}

// ✅ Parse JSON an toàn
def jsonResponse
try {
    jsonResponse = new JsonSlurper().parseText(response) // Parse response JSON
} catch (Exception e) {
    log.error(&quot;❌ JSON Parsing Error: ${e.message}&quot;)
    log.error(&quot;Full Response: \n${response}&quot;)
    return
}

// ✅ Trích xuất thông tin tài khoản
def statusAccount = jsonResponse?.payload?.status ?: &quot;UNKNOWN&quot; // Mặc định &quot;UNKNOWN&quot;
def cifNumberOld = jsonResponse?.payload?.cif ?: &quot;N/A&quot; // Mặc định &quot;N/A&quot;

// ✅ Lưu giá trị vào biến JMeter
vars.put(&quot;statusAccount&quot;, statusAccount)
vars.put(&quot;cifNumberOld&quot;, cifNumberOld)

// ✅ Log thông tin tài khoản
log.info(&quot;✅ CIF Account Old: ${cifNumberOld} | Status: ${statusAccount}&quot;)
</stringProp>
            </JSR223PostProcessor>
            <hashTree/>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="1.8 Phone - Clear CIF" enabled="true">
            <stringProp name="IfController.condition">${__groovy(vars.get(&apos;statusAccount&apos;) == &apos;Active&apos;)}</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
            <boolProp name="IfController.useExpression">true</boolProp>
          </IfController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="1.8 Clear CIF of Phone" enabled="true">
              <stringProp name="HTTPSampler.path">/api/party-service/v2/admin/parties/deactivate-customer</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">PATCH</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
    &quot;customerCifNumber&quot;: &quot;${cifNumberOld}&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name"></stringProp>
                    <stringProp name="Header.value"></stringProp>
                  </elementProp>
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">X-KEY</stringProp>
                    <stringProp name="Header.value">${adminKey}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">import groovy.json.JsonSlurper

log.info(&quot;\n 1.8 ---------- PHONE - CLEAR CIF ----------&quot;)

// ✅ Lấy thông tin từ request trước đó
def response = prev.getResponseDataAsString()?.trim() // Kiểm tra null tránh lỗi
def responseCode = prev.getResponseCode()?.toString()
def responseMessage = prev.getResponseMessage()
def responseTime = prev.getTime()

// ✅ Log thông tin cơ bản của request
log.info(&quot;${prev.getURL()} | ${responseTime}ms&quot;)

// ✅ Kiểm tra nếu response code là 400 (Không tìm thấy Phone Number Party)
if (responseCode == &quot;400&quot;) {
    prev.setResponseOK()  // Đánh dấu request thành công dù không tìm thấy dữ liệu
    log.warn(&quot;⚠️ Not Found Phone Number Party (Response 400).&quot;)
    return  // Dừng lại nếu không tìm thấy Phone Number Party
}

// ✅ Kiểm tra và log nếu response code khác 200 (lỗi ngoài mong đợi)
if (responseCode != &quot;200&quot;) {
    log.error(&quot;❌ API Error! Response Code: ${responseCode} | Message: ${responseMessage}&quot;)
    log.error(&quot;Full Response: \n${response}&quot;)
    return  // Dừng nếu có lỗi ngoài mong đợi
}

// ✅ Nếu API thành công, log kết quả mà không cần hiển thị response đầy đủ
log.info(&quot;✅ Clear CIF Number of Phone in Party Success!&quot;)
</stringProp>
              </JSR223PostProcessor>
              <hashTree/>
            </hashTree>
          </hashTree>
        </hashTree>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="2. Create new Account">
          <stringProp name="IfController.condition">${__groovy(vars.get(&quot;phoneNumberOnboard&quot;) != null)}</stringProp>
          <boolProp name="IfController.evaluateAll">false</boolProp>
          <boolProp name="IfController.useExpression">true</boolProp>
        </IfController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="2.1 Register Phone" enabled="true">
            <intProp name="HTTPSampler.concurrentPool">6</intProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/v3/onboarding/mobile/verify</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{ &#xd;
	&quot;deviceId&quot;: &quot;${deviceId}&quot;,&#xd;
    &quot;languageCode&quot;: &quot;vi&quot;,&#xd;
    &quot;mobileNumber&quot;: {&#xd;
        &quot;number&quot;: &quot;${phoneNumberOnboard}&quot;,&#xd;
        &quot;countryCode&quot;: &quot;+84&quot;&#xd;
     },&#xd;
     &quot;smsFooterString&quot;: &quot;123&quot;,&#xd;
    &quot;rateLimitingToken&quot;: &quot;kuhkh&quot;&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="x-request-id" elementType="Header">
                  <stringProp name="Header.name">x-request-id</stringProp>
                  <stringProp name="Header.value">dcb51815-7759-41d8-8fd6-46b32e241acf</stringProp>
                </elementProp>
                <elementProp name="gtw-authorization" elementType="Header">
                  <stringProp name="Header.name">gtw-authorization</stringProp>
                  <stringProp name="Header.value"></stringProp>
                </elementProp>
                <elementProp name="baggage" elementType="Header">
                  <stringProp name="Header.name">baggage</stringProp>
                  <stringProp name="Header.value">sentry-environment=uat,sentry-transaction=StartupScreen,sentry-public_key=a8650128baf78c0abc77876f8736238f,sentry-trace_id=ae79a0eed0354e439ab2d6820a04d617,sentry-sample_rate=0.85</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-GB,en-US;q=0.9,en;q=0.8</stringProp>
                </elementProp>
                <elementProp name="sentry-trace" elementType="Header">
                  <stringProp name="Header.name">sentry-trace</stringProp>
                  <stringProp name="Header.value">ae79a0eed0354e439ab2d6820a04d617-ae34fb51315f7476-1</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                </elementProp>
                <elementProp name="x-open-id" elementType="Header">
                  <stringProp name="Header.name">x-open-id</stringProp>
                  <stringProp name="Header.value">7b0e270b-c4f4-4cc4-826c-f324bd2d6684</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Vikki%20Uat/1698985660 CFNetwork/1410.0.3 Darwin/22.6.0</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">X-KEY</stringProp>
                  <stringProp name="Header.value">${publicKey}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="Set Onboarding ID" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">import groovy.json.JsonSlurper;

log.info(&quot;\n\n=============== !!! START ONBOARD NEW ACCOUNT !!! ===============\n\n&quot;);

log.info(&quot; \n 2.1 ---------- REGISTER PHONE ----------&quot;);

// ✅ Lấy thông tin từ request trước đó
def responseCode = prev.getResponseCode();
def responseMessage = prev.getResponseMessage();
def responseTime = prev.getTime(); // Response time in milliseconds
def requestUrl = prev.getURL().toString(); // Lấy URL của request
def response = prev.getResponseDataAsString().trim();

// ✅ Log thông tin cơ bản về request để hỗ trợ trace issue
log.info(requestUrl + &quot; | &quot; + responseTime + &quot;ms&quot;);

// ✅ Nếu response code != 200, log lỗi &amp; toàn bộ response để debug
if (responseCode != &quot;200&quot;) {
    log.error(&quot;❌ API Lỗi! Response Code: &quot; + responseCode + &quot; | Message: &quot; + responseMessage);
    log.error(&quot; Full Response: \n&quot; + response);
    return;
}

// ✅ Parse JSON an toàn
def jsonResponse;
try {
    jsonResponse = new JsonSlurper().parseText(response);
} catch (Exception e) {
    log.error(&quot;❌ Lỗi parse JSON: &quot; + e.getMessage());
    log.error(&quot; Full Response: \n&quot; + response);
    return;
}

// ✅ Trích xuất `onboardingId`
def onboardingId = jsonResponse?.payload?.onboardingId ?: null

// ✅ Kiểm tra Onboarding ID
if (onboardingId) {
    vars.put(&quot;onboardingId&quot;, onboardingId);
    log.info(&quot;✅ Onboard ID: &quot; + onboardingId);
} else {
    log.error(&quot;❌ Onboarding ID not found!&quot;);
}</stringProp>
            </JSR223PostProcessor>
            <hashTree/>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">import java.util.UUID

// ✅ Tạo deviceId ngẫu nhiên
//def deviceId = UUID.randomUUID().toString()
def deviceId = &quot;348014C9-2408-4818-BFAD-1C6F9E3D20F6&quot;
vars.put(&quot;deviceId&quot;, deviceId)

log.info(&quot;\n---------- GENERATE DATA ----------&quot;)

// ✅ Lấy giá trị từ biến JMeter
def phoneNumberOnboard = vars.get(&quot;phoneNumberOnboard&quot;) ?: &quot;N/A&quot;  // Đảm bảo không null
def idNumberOnboard = vars.get(&quot;idNumberOnboard&quot;) ?: &quot;N/A&quot;  // Đảm bảo không null

// ✅ Log thông tin số điện thoại, số ID, và Device ID
log.info(&quot;✅ Generated Phone Number: +84&quot; + phoneNumberOnboard)
log.info(&quot;✅ Generated ID Number: &quot; + idNumberOnboard)
log.info(&quot;✅ Generated Device ID: &quot; + deviceId)
</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="2.2 Verify OTP" enabled="true">
            <intProp name="HTTPSampler.concurrentPool">6</intProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">v3/onboarding/mobile/${onboardingId}/otp/verify</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value"> { &#xd;
    &quot;deviceId&quot;: &quot;${deviceId}&quot;,&#xd;
    &quot;otp&quot;: &quot;112233&quot;&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="x-request-id" elementType="Header">
                  <stringProp name="Header.name">x-request-id</stringProp>
                  <stringProp name="Header.value">b7460507-7c47-4931-8921-3497bc6e0e6c</stringProp>
                </elementProp>
                <elementProp name="x-open-id" elementType="Header">
                  <stringProp name="Header.name">x-open-id</stringProp>
                  <stringProp name="Header.value">7b0e270b-c4f4-4cc4-826c-f324bd2d6684</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-GB,en-US;q=0.9,en;q=0.8</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Vikki%20Uat/1698985660 CFNetwork/1410.0.3 Darwin/22.6.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">X-KEY</stringProp>
                  <stringProp name="Header.value">${publicKey}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="Logging Verify OTP" enabled="true">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">import groovy.json.JsonSlurper;

log.info(&quot; \n 2.2 ---------- VERIFY OTP ----------&quot;);

// ✅ Lấy thông tin từ request trước đó
def responseCode = prev.getResponseCode();
def responseMessage = prev.getResponseMessage();
def responseTime = prev.getTime(); // Response time in milliseconds
def requestUrl = prev.getURL().toString(); // Lấy URL của request
def response = prev.getResponseDataAsString().trim();

// ✅ Log thông tin cơ bản về request để hỗ trợ trace issue
log.info(requestUrl + &quot; | &quot; + responseTime + &quot;ms&quot;);


// ✅ Nếu response code != 200, log lỗi &amp; toàn bộ response để debug
if (responseCode != &quot;200&quot;) {
    log.error(&quot;❌ API Lỗi! Response Code: &quot; + responseCode + &quot; | Message: &quot; + responseMessage);
    log.error(&quot; Full Response: \n&quot; + response);
    return;
}

// ✅ Parse JSON an toàn
def jsonResponse;
try {
    jsonResponse = new JsonSlurper().parseText(response);
} catch (Exception e) {
    log.error(&quot;❌ Lỗi parse JSON: &quot; + e.getMessage());
    log.error(&quot; Full Response: \n&quot; + response);
    return;
}

// ✅ Trích xuất `accessToken`
def accessToken = jsonResponse?.payload?.onboardingToken?.accessToken ?: null

// ✅ Kiểm tra Access Token
if (accessToken) {
    vars.put(&quot;accessToken&quot;, accessToken);
    log.info(&quot;✅ OTP xác minh thành công!&quot;);
//    log.info(&quot;Access Token: &quot; + accessToken);
} else {
    log.error(&quot;❌ Access Token not found!&quot;);
}</stringProp>
              <stringProp name="scriptLanguage">groovy</stringProp>
            </JSR223PostProcessor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="2.3 Set Resume Point" enabled="true">
            <intProp name="HTTPSampler.concurrentPool">6</intProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/v4/onboarding/kyc/set-resume-point</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">PUT</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
	&quot;resumePoint&quot;: &quot;REVIEW_INFO&quot;,&#xd;
	&quot;appVersion&quot;: &quot;1.0.0&quot;,&#xd;
	&quot;data&quot;: &quot;&quot;&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="x-request-id" elementType="Header">
                  <stringProp name="Header.name">x-request-id</stringProp>
                  <stringProp name="Header.value">bdb97a68-7821-4c9a-8f91-a01c23459d6c</stringProp>
                </elementProp>
                <elementProp name="gtw-authorization" elementType="Header">
                  <stringProp name="Header.name">gtw-authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${access_token}</stringProp>
                </elementProp>
                <elementProp name="x-open-id" elementType="Header">
                  <stringProp name="Header.name">x-open-id</stringProp>
                  <stringProp name="Header.value">7b0e270b-c4f4-4cc4-826c-f324bd2d6684</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-GB,en-US;q=0.9,en;q=0.8</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Vikki%20Uat/1698985660 CFNetwork/1410.0.3 Darwin/22.6.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">OBD-Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${accessToken}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">X-KEY</stringProp>
                  <stringProp name="Header.value">${publicKey}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="Logging Resume point" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">import groovy.json.JsonSlurper;

log.info(&quot; \n 2.3 ---------- SET RESUME POINT ----------&quot;);

// ✅ Lấy thông tin từ request trước đó
def responseCode = prev.getResponseCode();
def responseMessage = prev.getResponseMessage();
def responseTime = prev.getTime(); // Response time in milliseconds
def requestUrl = prev.getURL().toString(); // Lấy URL của request
def response = prev.getResponseDataAsString().trim();

// ✅ Log thông tin cơ bản về request để hỗ trợ trace issue
log.info(requestUrl + &quot; | &quot; + responseTime + &quot;ms&quot;);


// ✅ Nếu response code != 200, log lỗi &amp; toàn bộ response để debug
if (responseCode != &quot;200&quot;) {
    log.error(&quot;❌ API Lỗi! Response Code: &quot; + responseCode + &quot; | Message: &quot; + responseMessage);
    log.error(&quot; Full Response: \n&quot; + response);
    return;
}

// ✅ Nếu thành công, log kết quả
log.info(&quot;✅ Resume Point xử lý thành công!&quot;);</stringProp>
            </JSR223PostProcessor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="2.4 [MOCK] Hyperverge OCR - Create">
            <intProp name="HTTPSampler.concurrentPool">6</intProp>
            <stringProp name="HTTPSampler.domain">wiremock.sit.galaxyfinx.in</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">__admin/mappings</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
    &quot;name&quot;: &quot;jmeter-hyperverge-mocking-khoahuynh-bs&quot;,&#xd;
    &quot;persistent&quot;: true,&#xd;
    &quot;request&quot;: {&#xd;
        &quot;url&quot;: &quot;/hyperverge/v1/link-kyc/results&quot;,&#xd;
        &quot;method&quot;: &quot;POST&quot;,&#xd;
        &quot;bodyPatterns&quot;: [&#xd;
            {&#xd;
                &quot;matchesJsonPath&quot;: &quot;$[?(@.transactionId == &apos;${onboardingId}&apos;)]&quot;&#xd;
            }&#xd;
        ]&#xd;
    },&#xd;
    &quot;response&quot;: {&#xd;
        &quot;status&quot;: 200,&#xd;
        &quot;jsonBody&quot;: {&#xd;
            &quot;status&quot;: &quot;success&quot;,&#xd;
            &quot;statusCode&quot;: 200,&#xd;
            &quot;metadata&quot;: {&#xd;
                &quot;requestId&quot;: &quot;0fcc901670cb2010edd9d1e242bddf88&quot;,&#xd;
                &quot;transactionId&quot;: &quot;1352139961703886848&quot;&#xd;
            },&#xd;
            &quot;result&quot;: {&#xd;
                &quot;workflowDetails&quot;: {&#xd;
                    &quot;workflowId&quot;: &quot;document_verification&quot;,&#xd;
                    &quot;version&quot;: 1&#xd;
                },&#xd;
                &quot;applicationStatus&quot;: &quot;auto_approved&quot;,&#xd;
                &quot;results&quot;: [&#xd;
                    {&#xd;
                        &quot;module&quot;: &quot;&quot;,&#xd;
                        &quot;countrySelected&quot;: &quot;vnm&quot;,&#xd;
                        &quot;documentSelected&quot;: &quot;id&quot;,&#xd;
                        &quot;attempts&quot;: &quot;1&quot;,&#xd;
                        &quot;expectedDocumentSide&quot;: &quot;front&quot;,&#xd;
                        &quot;moduleId&quot;: &quot;id_card_validation&quot;,&#xd;
                        &quot;croppedImageUrl&quot;: &quot;https://wiremock.sit.galaxyfinx.in/khoahuynhbs/khoahuynh-front.png&quot;,&#xd;
                        &quot;imageUrl&quot;: &quot;https://wiremock.sit.galaxyfinx.in/khoahuynhbs/khoahuynh-front.png&quot;,&#xd;
                        &quot;apiResponse&quot;: {&#xd;
                            &quot;status&quot;: &quot;success&quot;,&#xd;
                            &quot;statusCode&quot;: 200,&#xd;
                            &quot;metadata&quot;: {&#xd;
                                &quot;requestId&quot;: &quot;1742445726187-8259763b-58f9-4dd1-9ad8-0e8e0a013560&quot;,&#xd;
                                &quot;transactionId&quot;: &quot;1352139961703886848&quot;&#xd;
                            },&#xd;
                            &quot;result&quot;: {&#xd;
                                &quot;details&quot;: [&#xd;
                                    {&#xd;
                                        &quot;idType&quot;: &quot;cccd_chip_front&quot;,&#xd;
                                        &quot;fieldsExtracted&quot;: {&#xd;
                                            &quot;firstName&quot;: {&#xd;
                                                &quot;value&quot;: &quot;&quot;,&#xd;
                                                &quot;score&quot;: 0,&#xd;
                                                &quot;confidence&quot;: &quot;high&quot;&#xd;
                                            },&#xd;
                                            &quot;middleName&quot;: {&#xd;
                                                &quot;value&quot;: &quot;&quot;,&#xd;
                                                &quot;score&quot;: 0,&#xd;
                                                &quot;confidence&quot;: &quot;high&quot;&#xd;
                                            },&#xd;
                                            &quot;lastName&quot;: {&#xd;
                                                &quot;value&quot;: &quot;&quot;,&#xd;
                                                &quot;score&quot;: 0,&#xd;
                                                &quot;confidence&quot;: &quot;high&quot;&#xd;
                                            },&#xd;
                                            &quot;fullName&quot;: {&#xd;
                                                &quot;value&quot;: &quot;HUỲNH TẤN KHOA&quot;,&#xd;
                                                &quot;confidence&quot;: &quot;high&quot;,&#xd;
                                                &quot;score&quot;: 100&#xd;
                                            },&#xd;
                                            &quot;dateOfBirth&quot;: {&#xd;
                                                &quot;value&quot;: &quot;30-08-1998&quot;,&#xd;
                                                &quot;confidence&quot;: &quot;high&quot;,&#xd;
                                                &quot;score&quot;: 100&#xd;
                                            },&#xd;
                                            &quot;dateOfIssue&quot;: {&#xd;
                                                &quot;value&quot;: &quot;&quot;,&#xd;
                                                &quot;score&quot;: 0,&#xd;
                                                &quot;confidence&quot;: &quot;high&quot;&#xd;
                                            },&#xd;
                                            &quot;dateOfExpiry&quot;: {&#xd;
                                                &quot;value&quot;: &quot;30-08-2038&quot;,&#xd;
                                                &quot;confidence&quot;: &quot;high&quot;,&#xd;
                                                &quot;score&quot;: 100&#xd;
                                            },&#xd;
                                            &quot;countryCode&quot;: {&#xd;
                                                &quot;value&quot;: &quot;&quot;,&#xd;
                                                &quot;score&quot;: 0,&#xd;
                                                &quot;confidence&quot;: &quot;high&quot;&#xd;
                                            },&#xd;
                                            &quot;type&quot;: {&#xd;
                                                &quot;value&quot;: &quot;&quot;,&#xd;
                                                &quot;score&quot;: 0,&#xd;
                                                &quot;confidence&quot;: &quot;high&quot;&#xd;
                                            },&#xd;
                                            &quot;address&quot;: {&#xd;
                                                &quot;value&quot;: &quot;Tổ 10, Khu Phố 1 Xuân An, Phan Thiết, Bình Thuận&quot;,&#xd;
                                                &quot;confidence&quot;: &quot;high&quot;,&#xd;
                                                &quot;score&quot;: 100,&#xd;
                                                &quot;additionalInfo&quot;: &quot;khu ph 1 xun an phan thit bnh thun&quot;,&#xd;
                                                &quot;street&quot;: &quot;TỔ 10&quot;,&#xd;
                                                &quot;houseNumber&quot;: &quot;&quot;,&#xd;
                                                &quot;district&quot;: &quot;THÀNH PHỐ PHAN THIẾT&quot;,&#xd;
                                                &quot;province&quot;: &quot;TỈNH BÌNH THUẬN&quot;,&#xd;
                                                &quot;zipCode&quot;: &quot;&quot;&#xd;
                                            },&#xd;
                                            &quot;gender&quot;: {&#xd;
                                                &quot;value&quot;: &quot;M&quot;,&#xd;
                                                &quot;confidence&quot;: &quot;high&quot;,&#xd;
                                                &quot;score&quot;: 100&#xd;
                                            },&#xd;
                                            &quot;idNumber&quot;: {&#xd;
                                                &quot;value&quot;: &quot;${idNumberOnboard}&quot;,&#xd;
                                                &quot;confidence&quot;: &quot;high&quot;,&#xd;
                                                &quot;score&quot;: 100&#xd;
                                            },&#xd;
                                            &quot;placeOfBirth&quot;: {&#xd;
                                                &quot;value&quot;: &quot;&quot;,&#xd;
                                                &quot;score&quot;: 0,&#xd;
                                                &quot;confidence&quot;: &quot;high&quot;&#xd;
                                            },&#xd;
                                            &quot;placeOfIssue&quot;: {&#xd;
                                                &quot;value&quot;: &quot;&quot;,&#xd;
                                                &quot;score&quot;: 0,&#xd;
                                                &quot;confidence&quot;: &quot;high&quot;&#xd;
                                            },&#xd;
                                            &quot;yearOfBirth&quot;: {&#xd;
                                                &quot;value&quot;: &quot;1998&quot;,&#xd;
                                                &quot;confidence&quot;: &quot;high&quot;,&#xd;
                                                &quot;score&quot;: 100&#xd;
                                            },&#xd;
                                            &quot;age&quot;: {&#xd;
                                                &quot;value&quot;: &quot;&quot;,&#xd;
                                                &quot;score&quot;: 0,&#xd;
                                                &quot;confidence&quot;: &quot;high&quot;&#xd;
                                            },&#xd;
                                            &quot;fatherName&quot;: {&#xd;
                                                &quot;value&quot;: &quot;&quot;,&#xd;
                                                &quot;score&quot;: 0,&#xd;
                                                &quot;confidence&quot;: &quot;high&quot;&#xd;
                                            },&#xd;
                                            &quot;motherName&quot;: {&#xd;
                                                &quot;value&quot;: &quot;&quot;,&#xd;
                                                &quot;score&quot;: 0,&#xd;
                                                &quot;confidence&quot;: &quot;high&quot;&#xd;
                                            },&#xd;
                                            &quot;husbandName&quot;: {&#xd;
                                                &quot;value&quot;: &quot;&quot;,&#xd;
                                                &quot;score&quot;: 0,&#xd;
                                                &quot;confidence&quot;: &quot;high&quot;&#xd;
                                            },&#xd;
                                            &quot;spouseName&quot;: {&#xd;
                                                &quot;value&quot;: &quot;&quot;,&#xd;
                                                &quot;score&quot;: 0,&#xd;
                                                &quot;confidence&quot;: &quot;high&quot;&#xd;
                                            },&#xd;
                                            &quot;nationality&quot;: {&#xd;
                                                &quot;value&quot;: &quot;Việt Nam&quot;,&#xd;
                                                &quot;confidence&quot;: &quot;high&quot;,&#xd;
                                                &quot;score&quot;: 100&#xd;
                                            },&#xd;
                                            &quot;mrzString&quot;: {&#xd;
                                                &quot;value&quot;: &quot;&quot;,&#xd;
                                                &quot;idNumber&quot;: &quot;&quot;,&#xd;
                                                &quot;fullName&quot;: &quot;&quot;,&#xd;
                                                &quot;gender&quot;: &quot;&quot;,&#xd;
                                                &quot;dateOfBirth&quot;: &quot;&quot;,&#xd;
                                                &quot;dateOfExpiry&quot;: &quot;&quot;,&#xd;
                                                &quot;nationality&quot;: &quot;&quot;,&#xd;
                                                &quot;score&quot;: 0,&#xd;
                                                &quot;confidence&quot;: &quot;high&quot;&#xd;
                                            },&#xd;
                                            &quot;homeTown&quot;: {&#xd;
                                                &quot;value&quot;: &quot;Đức Long, Phan Thiết, Bình Thuận&quot;,&#xd;
                                                &quot;confidence&quot;: &quot;high&quot;,&#xd;
                                                &quot;score&quot;: 100&#xd;
                                            }&#xd;
                                        },&#xd;
                                        &quot;croppedImageUrl&quot;: &quot;https://wiremock.sit.galaxyfinx.in/khoahuynhbs/khoahuynh-front.png&quot;,&#xd;
                                        &quot;isWrongSide&quot;: &quot;no&quot;,&#xd;
                                        &quot;qualityChecks&quot;: {&#xd;
                                            &quot;blur&quot;: {&#xd;
                                                &quot;value&quot;: &quot;no&quot;,&#xd;
                                                &quot;score&quot;: 100,&#xd;
                                                &quot;confidence&quot;: &quot;high&quot;&#xd;
                                            },&#xd;
                                            &quot;glare&quot;: {&#xd;
                                                &quot;value&quot;: &quot;no&quot;,&#xd;
                                                &quot;score&quot;: 10,&#xd;
                                                &quot;confidence&quot;: &quot;high&quot;&#xd;
                                            },&#xd;
                                            &quot;blackAndWhite&quot;: {&#xd;
                                                &quot;value&quot;: &quot;no&quot;,&#xd;
                                                &quot;score&quot;: 100,&#xd;
                                                &quot;confidence&quot;: &quot;high&quot;&#xd;
                                            },&#xd;
                                            &quot;partialId&quot;: {&#xd;
                                                &quot;value&quot;: &quot;no&quot;,&#xd;
                                                &quot;score&quot;: 97,&#xd;
                                                &quot;confidence&quot;: &quot;high&quot;&#xd;
                                            },&#xd;
                                            &quot;faceNotDetected&quot;: {&#xd;
                                                &quot;value&quot;: &quot;no&quot;,&#xd;
                                                &quot;score&quot;: 99,&#xd;
                                                &quot;confidence&quot;: &quot;high&quot;&#xd;
                                            }&#xd;
                                        },&#xd;
                                        &quot;tamperChecks&quot;: {&#xd;
                                            &quot;photoTampered&quot;: {&#xd;
                                                &quot;value&quot;: &quot;no&quot;,&#xd;
                                                &quot;score&quot;: 0,&#xd;
                                                &quot;confidence&quot;: &quot;high&quot;&#xd;
                                            }&#xd;
                                        },&#xd;
                                        &quot;ruleChecks&quot;: {&#xd;
                                            &quot;idNumberLengthMismatch&quot;: {&#xd;
                                                &quot;value&quot;: &quot;no&quot;,&#xd;
                                                &quot;score&quot;: 0,&#xd;
                                                &quot;confidence&quot;: &quot;high&quot;&#xd;
                                            },&#xd;
                                            &quot;expiredID&quot;: {&#xd;
                                                &quot;value&quot;: &quot;no&quot;,&#xd;
                                                &quot;score&quot;: 0,&#xd;
                                                &quot;confidence&quot;: &quot;high&quot;&#xd;
                                            },&#xd;
                                            &quot;idProvinceCodeInvalid&quot;: {&#xd;
                                                &quot;value&quot;: &quot;no&quot;,&#xd;
                                                &quot;score&quot;: 0,&#xd;
                                                &quot;confidence&quot;: &quot;high&quot;&#xd;
                                            },&#xd;
                                            &quot;idDOBGenderCodeInvalid&quot;: {&#xd;
                                                &quot;value&quot;: &quot;no&quot;,&#xd;
                                                &quot;score&quot;: 0,&#xd;
                                                &quot;confidence&quot;: &quot;high&quot;&#xd;
                                            }&#xd;
                                        }&#xd;
                                    }&#xd;
                                ],&#xd;
                                &quot;summary&quot;: {&#xd;
                                    &quot;action&quot;: &quot;pass&quot;,&#xd;
                                    &quot;details&quot;: []&#xd;
                                }&#xd;
                            }&#xd;
                        },&#xd;
                        &quot;previousAttempts&quot;: []&#xd;
                    },&#xd;
                    {&#xd;
                        &quot;module&quot;: &quot;&quot;,&#xd;
                        &quot;countrySelected&quot;: &quot;vnm&quot;,&#xd;
                        &quot;documentSelected&quot;: &quot;id&quot;,&#xd;
                        &quot;attempts&quot;: &quot;1&quot;,&#xd;
                        &quot;expectedDocumentSide&quot;: &quot;back&quot;,&#xd;
                        &quot;moduleId&quot;: &quot;id_card_validation&quot;,&#xd;
                        &quot;croppedImageUrl&quot;: &quot;https://wiremock.sit.galaxyfinx.in/khoahuynhbs/khoahuynh-back.png&quot;,&#xd;
                        &quot;imageUrl&quot;: &quot;https://wiremock.sit.galaxyfinx.in/khoahuynhbs/khoahuynh-back.png&quot;,&#xd;
                        &quot;apiResponse&quot;: {&#xd;
                            &quot;status&quot;: &quot;success&quot;,&#xd;
                            &quot;statusCode&quot;: 200,&#xd;
                            &quot;metadata&quot;: {&#xd;
                                &quot;requestId&quot;: &quot;1742445736312-330ac205-69fe-4b33-896e-c2c77bbcda7e&quot;,&#xd;
                                &quot;transactionId&quot;: &quot;1352139961703886848&quot;&#xd;
                            },&#xd;
                            &quot;result&quot;: {&#xd;
                                &quot;details&quot;: [&#xd;
                                    {&#xd;
                                        &quot;idType&quot;: &quot;cccd_chip_back&quot;,&#xd;
                                        &quot;fieldsExtracted&quot;: {&#xd;
                                            &quot;firstName&quot;: {&#xd;
                                                &quot;value&quot;: &quot;&quot;,&#xd;
                                                &quot;score&quot;: 0,&#xd;
                                                &quot;confidence&quot;: &quot;high&quot;&#xd;
                                            },&#xd;
                                            &quot;middleName&quot;: {&#xd;
                                                &quot;value&quot;: &quot;&quot;,&#xd;
                                                &quot;score&quot;: 0,&#xd;
                                                &quot;confidence&quot;: &quot;high&quot;&#xd;
                                            },&#xd;
                                            &quot;lastName&quot;: {&#xd;
                                                &quot;value&quot;: &quot;&quot;,&#xd;
                                                &quot;score&quot;: 0,&#xd;
                                                &quot;confidence&quot;: &quot;high&quot;&#xd;
                                            },&#xd;
                                            &quot;fullName&quot;: {&#xd;
                                                &quot;value&quot;: &quot;&quot;,&#xd;
                                                &quot;score&quot;: 0,&#xd;
                                                &quot;confidence&quot;: &quot;high&quot;&#xd;
                                            },&#xd;
                                            &quot;dateOfBirth&quot;: {&#xd;
                                                &quot;value&quot;: &quot;&quot;,&#xd;
                                                &quot;score&quot;: 0,&#xd;
                                                &quot;confidence&quot;: &quot;high&quot;&#xd;
                                            },&#xd;
                                            &quot;dateOfIssue&quot;: {&#xd;
                                                &quot;value&quot;: &quot;14-08-2023&quot;,&#xd;
                                                &quot;confidence&quot;: &quot;high&quot;,&#xd;
                                                &quot;score&quot;: 100&#xd;
                                            },&#xd;
                                            &quot;dateOfExpiry&quot;: {&#xd;
                                                &quot;value&quot;: &quot;&quot;,&#xd;
                                                &quot;score&quot;: 0,&#xd;
                                                &quot;confidence&quot;: &quot;high&quot;&#xd;
                                            },&#xd;
                                            &quot;countryCode&quot;: {&#xd;
                                                &quot;value&quot;: &quot;&quot;,&#xd;
                                                &quot;score&quot;: 0,&#xd;
                                                &quot;confidence&quot;: &quot;high&quot;&#xd;
                                            },&#xd;
                                            &quot;type&quot;: {&#xd;
                                                &quot;value&quot;: &quot;&quot;,&#xd;
                                                &quot;score&quot;: 0,&#xd;
                                                &quot;confidence&quot;: &quot;high&quot;&#xd;
                                            },&#xd;
                                            &quot;address&quot;: {&#xd;
                                                &quot;value&quot;: &quot;&quot;,&#xd;
                                                &quot;additionalInfo&quot;: &quot;&quot;,&#xd;
                                                &quot;street&quot;: &quot;&quot;,&#xd;
                                                &quot;houseNumber&quot;: &quot;&quot;,&#xd;
                                                &quot;district&quot;: &quot;&quot;,&#xd;
                                                &quot;province&quot;: &quot;&quot;,&#xd;
                                                &quot;zipCode&quot;: &quot;&quot;,&#xd;
                                                &quot;score&quot;: 0,&#xd;
                                                &quot;confidence&quot;: &quot;high&quot;&#xd;
                                            },&#xd;
                                            &quot;gender&quot;: {&#xd;
                                                &quot;value&quot;: &quot;&quot;,&#xd;
                                                &quot;score&quot;: 0,&#xd;
                                                &quot;confidence&quot;: &quot;high&quot;&#xd;
                                            },&#xd;
                                            &quot;idNumber&quot;: {&#xd;
                                                &quot;value&quot;: &quot;&quot;,&#xd;
                                                &quot;score&quot;: 0,&#xd;
                                                &quot;confidence&quot;: &quot;high&quot;&#xd;
                                            },&#xd;
                                            &quot;placeOfBirth&quot;: {&#xd;
                                                &quot;value&quot;: &quot;&quot;,&#xd;
                                                &quot;score&quot;: 0,&#xd;
                                                &quot;confidence&quot;: &quot;high&quot;&#xd;
                                            },&#xd;
                                            &quot;placeOfIssue&quot;: {&#xd;
                                                &quot;value&quot;: &quot;CỤC TRƯỞNG CỤC CẢNH SÁT QUẢN LÝ HÀNH CHÍNH VỀ TRẬT TỰ XÃ HỘI&quot;,&#xd;
                                                &quot;confidence&quot;: &quot;high&quot;,&#xd;
                                                &quot;score&quot;: 95&#xd;
                                            },&#xd;
                                            &quot;yearOfBirth&quot;: {&#xd;
                                                &quot;value&quot;: &quot;&quot;,&#xd;
                                                &quot;score&quot;: 0,&#xd;
                                                &quot;confidence&quot;: &quot;high&quot;&#xd;
                                            },&#xd;
                                            &quot;age&quot;: {&#xd;
                                                &quot;value&quot;: &quot;&quot;,&#xd;
                                                &quot;score&quot;: 0,&#xd;
                                                &quot;confidence&quot;: &quot;high&quot;&#xd;
                                            },&#xd;
                                            &quot;fatherName&quot;: {&#xd;
                                                &quot;value&quot;: &quot;&quot;,&#xd;
                                                &quot;score&quot;: 0,&#xd;
                                                &quot;confidence&quot;: &quot;high&quot;&#xd;
                                            },&#xd;
                                            &quot;motherName&quot;: {&#xd;
                                                &quot;value&quot;: &quot;&quot;,&#xd;
                                                &quot;score&quot;: 0,&#xd;
                                                &quot;confidence&quot;: &quot;high&quot;&#xd;
                                            },&#xd;
                                            &quot;husbandName&quot;: {&#xd;
                                                &quot;value&quot;: &quot;&quot;,&#xd;
                                                &quot;score&quot;: 0,&#xd;
                                                &quot;confidence&quot;: &quot;high&quot;&#xd;
                                            },&#xd;
                                            &quot;spouseName&quot;: {&#xd;
                                                &quot;value&quot;: &quot;&quot;,&#xd;
                                                &quot;score&quot;: 0,&#xd;
                                                &quot;confidence&quot;: &quot;high&quot;&#xd;
                                            },&#xd;
                                            &quot;nationality&quot;: {&#xd;
                                                &quot;value&quot;: &quot;&quot;,&#xd;
                                                &quot;score&quot;: 0,&#xd;
                                                &quot;confidence&quot;: &quot;high&quot;&#xd;
                                            },&#xd;
                                            &quot;mrzString&quot;: {&#xd;
                                                &quot;value&quot;: &quot;IDVNM0980002331060098000233&lt;&lt;99808302M3808300VNM&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;8HUYNH&lt;&lt;TAN&lt;KHOA&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&quot;,&#xd;
                                                &quot;confidence&quot;: &quot;high&quot;,&#xd;
                                                &quot;score&quot;: 100,&#xd;
                                                &quot;idNumber&quot;: &quot;060098000233&quot;,&#xd;
                                                &quot;fullName&quot;: &quot;HUYNH TAN KHOA&quot;,&#xd;
                                                &quot;gender&quot;: &quot;M&quot;,&#xd;
                                                &quot;dateOfBirth&quot;: &quot;30-08-1998&quot;,&#xd;
                                                &quot;dateOfExpiry&quot;: &quot;30-08-2038&quot;,&#xd;
                                                &quot;nationality&quot;: &quot;VNM&quot;&#xd;
                                            },&#xd;
                                            &quot;homeTown&quot;: {&#xd;
                                                &quot;value&quot;: &quot;&quot;,&#xd;
                                                &quot;score&quot;: 0,&#xd;
                                                &quot;confidence&quot;: &quot;high&quot;&#xd;
                                            }&#xd;
                                        },&#xd;
                                        &quot;croppedImageUrl&quot;: &quot;https://wiremock.sit.galaxyfinx.in/khoahuynhbs/khoahuynh-back.png&quot;,&#xd;
                                        &quot;isWrongSide&quot;: &quot;no&quot;,&#xd;
                                        &quot;qualityChecks&quot;: {&#xd;
                                            &quot;blur&quot;: {&#xd;
                                                &quot;value&quot;: &quot;no&quot;,&#xd;
                                                &quot;score&quot;: 100,&#xd;
                                                &quot;confidence&quot;: &quot;high&quot;&#xd;
                                            },&#xd;
                                            &quot;glare&quot;: {&#xd;
                                                &quot;value&quot;: &quot;no&quot;,&#xd;
                                                &quot;score&quot;: 10,&#xd;
                                                &quot;confidence&quot;: &quot;high&quot;&#xd;
                                            },&#xd;
                                            &quot;blackAndWhite&quot;: {&#xd;
                                                &quot;value&quot;: &quot;no&quot;,&#xd;
                                                &quot;score&quot;: 100,&#xd;
                                                &quot;confidence&quot;: &quot;high&quot;&#xd;
                                            },&#xd;
                                            &quot;partialId&quot;: {&#xd;
                                                &quot;value&quot;: &quot;no&quot;,&#xd;
                                                &quot;score&quot;: 97,&#xd;
                                                &quot;confidence&quot;: &quot;high&quot;&#xd;
                                            }&#xd;
                                        },&#xd;
                                        &quot;ruleChecks&quot;: {&#xd;
                                            &quot;mrzTampered&quot;: {&#xd;
                                                &quot;value&quot;: &quot;no&quot;,&#xd;
                                                &quot;score&quot;: 0,&#xd;
                                                &quot;confidence&quot;: &quot;high&quot;&#xd;
                                            }&#xd;
                                        }&#xd;
                                    }&#xd;
                                ],&#xd;
                                &quot;summary&quot;: {&#xd;
                                    &quot;action&quot;: &quot;pass&quot;,&#xd;
                                    &quot;details&quot;: []&#xd;
                                }&#xd;
                            }&#xd;
                        },&#xd;
                        &quot;previousAttempts&quot;: []&#xd;
                    },&#xd;
                    {&#xd;
                        &quot;module&quot;: &quot;&quot;,&#xd;
                        &quot;attempts&quot;: &quot;1&quot;,&#xd;
                        &quot;moduleId&quot;: &quot;module_selfie&quot;,&#xd;
                        &quot;imageUrl&quot;: &quot;https://wiremock.sit.galaxyfinx.in/khoahuynhbs/khoahuynh-selfie.png&quot;,&#xd;
                        &quot;apiResponse&quot;: {&#xd;
                            &quot;status&quot;: &quot;success&quot;,&#xd;
                            &quot;statusCode&quot;: 200,&#xd;
                            &quot;metadata&quot;: {&#xd;
                                &quot;requestId&quot;: &quot;1742445758678-115d413d-df10-43ec-951e-0dcd7b6fa46b&quot;,&#xd;
                                &quot;transactionId&quot;: &quot;1352139961703886848&quot;&#xd;
                            },&#xd;
                            &quot;result&quot;: {&#xd;
                                &quot;details&quot;: {&#xd;
                                    &quot;liveFace&quot;: {&#xd;
                                        &quot;value&quot;: &quot;yes&quot;,&#xd;
                                        &quot;confidence&quot;: &quot;high&quot;,&#xd;
                                        &quot;score&quot;: 100&#xd;
                                    },&#xd;
                                    &quot;qualityChecks&quot;: {&#xd;
                                        &quot;blur&quot;: {&#xd;
                                            &quot;score&quot;: 95,&#xd;
                                            &quot;value&quot;: &quot;no&quot;,&#xd;
                                            &quot;confidence&quot;: &quot;high&quot;&#xd;
                                        },&#xd;
                                        &quot;eyesClosed&quot;: {&#xd;
                                            &quot;score&quot;: 0,&#xd;
                                            &quot;value&quot;: &quot;no&quot;,&#xd;
                                            &quot;confidence&quot;: &quot;high&quot;&#xd;
                                        },&#xd;
                                        &quot;eyewear&quot;: {&#xd;
                                            &quot;score&quot;: 0,&#xd;
                                            &quot;value&quot;: &quot;no&quot;,&#xd;
                                            &quot;confidence&quot;: &quot;high&quot;&#xd;
                                        },&#xd;
                                        &quot;faceOccluded&quot;: {&#xd;
                                            &quot;score&quot;: 0,&#xd;
                                            &quot;value&quot;: &quot;no&quot;,&#xd;
                                            &quot;confidence&quot;: &quot;high&quot;&#xd;
                                        },&#xd;
                                        &quot;hat&quot;: {&#xd;
                                            &quot;score&quot;: 99,&#xd;
                                            &quot;value&quot;: &quot;no&quot;,&#xd;
                                            &quot;confidence&quot;: &quot;high&quot;&#xd;
                                        },&#xd;
                                        &quot;headTurned&quot;: {&#xd;
                                            &quot;value&quot;: &quot;no&quot;,&#xd;
                                            &quot;score&quot;: 0,&#xd;
                                            &quot;confidence&quot;: &quot;high&quot;&#xd;
                                        },&#xd;
                                        &quot;maskPresent&quot;: {&#xd;
                                            &quot;score&quot;: 0,&#xd;
                                            &quot;value&quot;: &quot;no&quot;,&#xd;
                                            &quot;confidence&quot;: &quot;high&quot;&#xd;
                                        },&#xd;
                                        &quot;multipleFaces&quot;: {&#xd;
                                            &quot;value&quot;: &quot;no&quot;,&#xd;
                                            &quot;score&quot;: 0,&#xd;
                                            &quot;confidence&quot;: &quot;high&quot;&#xd;
                                        },&#xd;
                                        &quot;nudity&quot;: {&#xd;
                                            &quot;score&quot;: 100,&#xd;
                                            &quot;value&quot;: &quot;no&quot;,&#xd;
                                            &quot;confidence&quot;: &quot;high&quot;&#xd;
                                        }&#xd;
                                    }&#xd;
                                },&#xd;
                                &quot;summary&quot;: {&#xd;
                                    &quot;action&quot;: &quot;pass&quot;,&#xd;
                                    &quot;details&quot;: []&#xd;
                                }&#xd;
                            }&#xd;
                        },&#xd;
                        &quot;previousAttempts&quot;: []&#xd;
                    },&#xd;
                    {&#xd;
                        &quot;module&quot;: &quot;&quot;,&#xd;
                        &quot;moduleId&quot;: &quot;module_facematch&quot;,&#xd;
                        &quot;idImageUrl&quot;: &quot;https://wiremock.sit.galaxyfinx.in/khoahuynhbs/khoahuynh-front.png&quot;,&#xd;
                        &quot;selfieImageUrl&quot;: &quot;https://wiremock.sit.galaxyfinx.in/khoahuynhbs/khoahuynh-selfie.png&quot;,&#xd;
                        &quot;apiResponse&quot;: {&#xd;
                            &quot;status&quot;: &quot;success&quot;,&#xd;
                            &quot;statusCode&quot;: 200,&#xd;
                            &quot;metadata&quot;: {&#xd;
                                &quot;requestId&quot;: &quot;1742445759984-8546b2f0-53d0-452c-8b7a-d9a37666e8c7&quot;,&#xd;
                                &quot;transactionId&quot;: &quot;1352139961703886848&quot;&#xd;
                            },&#xd;
                            &quot;result&quot;: {&#xd;
                                &quot;details&quot;: {&#xd;
                                    &quot;match&quot;: {&#xd;
                                        &quot;value&quot;: &quot;yes&quot;,&#xd;
                                        &quot;score&quot;: 98,&#xd;
                                        &quot;confidence&quot;: &quot;high&quot;&#xd;
                                    }&#xd;
                                },&#xd;
                                &quot;summary&quot;: {&#xd;
                                    &quot;action&quot;: &quot;pass&quot;,&#xd;
                                    &quot;details&quot;: []&#xd;
                                }&#xd;
                            }&#xd;
                        },&#xd;
                        &quot;attempts&quot;: &quot;1&quot;,&#xd;
                        &quot;previousAttempts&quot;: []&#xd;
                    }&#xd;
                ],&#xd;
                &quot;userDetails&quot;: {&#xd;
                    &quot;selfieRequestId&quot;: &quot;1742445758678-115d413d-df10-43ec-951e-0dcd7b6fa46b&quot;,&#xd;
                    &quot;facematchRequestId&quot;: &quot;1742445759984-8546b2f0-53d0-452c-8b7a-d9a37666e8c7&quot;,&#xd;
                    &quot;selfieAction&quot;: &quot;pass&quot;,&#xd;
                    &quot;facematchAction&quot;: &quot;pass&quot;&#xd;
                }&#xd;
            }&#xd;
        },&#xd;
        &quot;headers&quot;: {&#xd;
            &quot;Content-Type&quot;: &quot;application/json&quot;&#xd;
        },&#xd;
        &quot;transformers&quot;: [&#xd;
            &quot;response-template&quot;&#xd;
        ]&#xd;
    },&#xd;
    &quot;priority&quot;: 2,&#xd;
    &quot;metadata&quot;: {&#xd;
        &quot;wiremock-gui&quot;: {&#xd;
            &quot;folder&quot;: &quot;/mappings/hyperverge/jmeter&quot;&#xd;
        }&#xd;
    }&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">//log.info(&quot;-----[MOCK] Hyperverge OCR-----&quot;);

//def digits = Long.toString(${phoneNumberOnboard});
//def CCCD = &quot;044091&quot; + digits[-6..-1]
//vars.put(&quot;idNumber&quot;, CCCD)
//log.info(&quot; \n ------------------&gt; id number: &quot; + CCCD);</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="x-request-id" elementType="Header">
                  <stringProp name="Header.name">x-request-id</stringProp>
                  <stringProp name="Header.value">bdb97a68-7821-4c9a-8f91-a01c23459d6c</stringProp>
                </elementProp>
                <elementProp name="gtw-authorization" elementType="Header">
                  <stringProp name="Header.name">gtw-authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${access_token}</stringProp>
                </elementProp>
                <elementProp name="x-open-id" elementType="Header">
                  <stringProp name="Header.name">x-open-id</stringProp>
                  <stringProp name="Header.value">7b0e270b-c4f4-4cc4-826c-f324bd2d6684</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-GB,en-US;q=0.9,en;q=0.8</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Vikki%20Uat/1698985660 CFNetwork/1410.0.3 Darwin/22.6.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">OBD-Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${accessToken}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">X-KEY</stringProp>
                  <stringProp name="Header.value">${publicKey}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">import groovy.json.JsonSlurper;

log.info(&quot; \n 2.4 ---------- [MOCK] HYPERVEGER OCR - CREATE ----------&quot;);

// ✅ Lấy thông tin từ request trước đó
def responseCode = prev.getResponseCode();
def responseMessage = prev.getResponseMessage();
def responseTime = prev.getTime(); // Response time in milliseconds
def requestUrl = prev.getURL().toString(); // Lấy URL của request
def response = prev.getResponseDataAsString().trim();

// ✅ Log thông tin cơ bản về request để hỗ trợ trace issue
log.info(requestUrl + &quot; | &quot; + responseTime + &quot;ms&quot;);


// ✅ Nếu response code != 200, log lỗi &amp; toàn bộ response để debug
if (responseCode != &quot;201&quot;) {
    log.error(&quot;❌ API Lỗi! Response Code: &quot; + responseCode + &quot; | Message: &quot; + responseMessage);
    log.error(&quot; Full Response: \n&quot; + response);
    return;
}

// ✅ Parse JSON an toàn
def jsonResponse;
try {
    jsonResponse = new JsonSlurper().parseText(response);
} catch (Exception e) {
    log.error(&quot;❌ Lỗi parse JSON: &quot; + e.getMessage());
    log.error(&quot; Full Response: \n&quot; + response);
    return;
}

// ✅ Trích xuất `idHyperVergeOCR`
def idHyperVergeOCRNew = jsonResponse?.id ?: null

// ✅ Kiểm tra idHyperVergeOCR
if (idHyperVergeOCRNew) {
    vars.put(&quot;idHyperVergeOCRNew&quot;, idHyperVergeOCRNew);
    log.info(&quot;✅ idHyperVergeOCR Extracted: &quot; + idHyperVergeOCRNew);
} else {
    log.error(&quot;❌ idHyperVergeOCR not found!&quot;);
}</stringProp>
            </JSR223PostProcessor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="2.4 [MOCK] Hyperverge OCR - Update" enabled="false">
            <intProp name="HTTPSampler.concurrentPool">6</intProp>
            <stringProp name="HTTPSampler.domain">wiremock.sit.galaxyfinx.in</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">__admin/mappings/${hpvOcrMockingId}</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">PUT</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
    &quot;name&quot;: &quot;jmeter-hyperverge-mocking-khoahuynh-bs&quot;,&#xd;
    &quot;persistent&quot;: true,&#xd;
    &quot;request&quot;: {&#xd;
        &quot;url&quot;: &quot;/hyperverge/v1/link-kyc/results&quot;,&#xd;
        &quot;method&quot;: &quot;POST&quot;,&#xd;
        &quot;bodyPatterns&quot;: [&#xd;
            {&#xd;
                &quot;matchesJsonPath&quot;: &quot;$[?(@.transactionId == &apos;${onboardingId}&apos;)]&quot;&#xd;
            }&#xd;
        ]&#xd;
    },&#xd;
    &quot;response&quot;: {&#xd;
        &quot;status&quot;: 200,&#xd;
        &quot;jsonBody&quot;: {&#xd;
            &quot;status&quot;: &quot;success&quot;,&#xd;
            &quot;statusCode&quot;: 200,&#xd;
            &quot;metadata&quot;: {&#xd;
                &quot;requestId&quot;: &quot;0fcc901670cb2010edd9d1e242bddf88&quot;,&#xd;
                &quot;transactionId&quot;: &quot;1352139961703886848&quot;&#xd;
            },&#xd;
            &quot;result&quot;: {&#xd;
                &quot;workflowDetails&quot;: {&#xd;
                    &quot;workflowId&quot;: &quot;document_verification&quot;,&#xd;
                    &quot;version&quot;: 1&#xd;
                },&#xd;
                &quot;applicationStatus&quot;: &quot;auto_approved&quot;,&#xd;
                &quot;results&quot;: [&#xd;
                    {&#xd;
                        &quot;module&quot;: &quot;&quot;,&#xd;
                        &quot;countrySelected&quot;: &quot;vnm&quot;,&#xd;
                        &quot;documentSelected&quot;: &quot;id&quot;,&#xd;
                        &quot;attempts&quot;: &quot;1&quot;,&#xd;
                        &quot;expectedDocumentSide&quot;: &quot;front&quot;,&#xd;
                        &quot;moduleId&quot;: &quot;id_card_validation&quot;,&#xd;
                        &quot;croppedImageUrl&quot;: &quot;https://wiremock.sit.galaxyfinx.in/khoahuynhbs/khoahuynh-front.png&quot;,&#xd;
                        &quot;imageUrl&quot;: &quot;https://wiremock.sit.galaxyfinx.in/khoahuynhbs/khoahuynh-front.png&quot;,&#xd;
                        &quot;apiResponse&quot;: {&#xd;
                            &quot;status&quot;: &quot;success&quot;,&#xd;
                            &quot;statusCode&quot;: 200,&#xd;
                            &quot;metadata&quot;: {&#xd;
                                &quot;requestId&quot;: &quot;1742445726187-8259763b-58f9-4dd1-9ad8-0e8e0a013560&quot;,&#xd;
                                &quot;transactionId&quot;: &quot;1352139961703886848&quot;&#xd;
                            },&#xd;
                            &quot;result&quot;: {&#xd;
                                &quot;details&quot;: [&#xd;
                                    {&#xd;
                                        &quot;idType&quot;: &quot;cccd_chip_front&quot;,&#xd;
                                        &quot;fieldsExtracted&quot;: {&#xd;
                                            &quot;firstName&quot;: {&#xd;
                                                &quot;value&quot;: &quot;&quot;,&#xd;
                                                &quot;score&quot;: 0,&#xd;
                                                &quot;confidence&quot;: &quot;high&quot;&#xd;
                                            },&#xd;
                                            &quot;middleName&quot;: {&#xd;
                                                &quot;value&quot;: &quot;&quot;,&#xd;
                                                &quot;score&quot;: 0,&#xd;
                                                &quot;confidence&quot;: &quot;high&quot;&#xd;
                                            },&#xd;
                                            &quot;lastName&quot;: {&#xd;
                                                &quot;value&quot;: &quot;&quot;,&#xd;
                                                &quot;score&quot;: 0,&#xd;
                                                &quot;confidence&quot;: &quot;high&quot;&#xd;
                                            },&#xd;
                                            &quot;fullName&quot;: {&#xd;
                                                &quot;value&quot;: &quot;HUỲNH TẤN KHOA&quot;,&#xd;
                                                &quot;confidence&quot;: &quot;high&quot;,&#xd;
                                                &quot;score&quot;: 100&#xd;
                                            },&#xd;
                                            &quot;dateOfBirth&quot;: {&#xd;
                                                &quot;value&quot;: &quot;30-08-1998&quot;,&#xd;
                                                &quot;confidence&quot;: &quot;high&quot;,&#xd;
                                                &quot;score&quot;: 100&#xd;
                                            },&#xd;
                                            &quot;dateOfIssue&quot;: {&#xd;
                                                &quot;value&quot;: &quot;&quot;,&#xd;
                                                &quot;score&quot;: 0,&#xd;
                                                &quot;confidence&quot;: &quot;high&quot;&#xd;
                                            },&#xd;
                                            &quot;dateOfExpiry&quot;: {&#xd;
                                                &quot;value&quot;: &quot;30-08-2038&quot;,&#xd;
                                                &quot;confidence&quot;: &quot;high&quot;,&#xd;
                                                &quot;score&quot;: 100&#xd;
                                            },&#xd;
                                            &quot;countryCode&quot;: {&#xd;
                                                &quot;value&quot;: &quot;&quot;,&#xd;
                                                &quot;score&quot;: 0,&#xd;
                                                &quot;confidence&quot;: &quot;high&quot;&#xd;
                                            },&#xd;
                                            &quot;type&quot;: {&#xd;
                                                &quot;value&quot;: &quot;&quot;,&#xd;
                                                &quot;score&quot;: 0,&#xd;
                                                &quot;confidence&quot;: &quot;high&quot;&#xd;
                                            },&#xd;
                                            &quot;address&quot;: {&#xd;
                                                &quot;value&quot;: &quot;Tổ 10, Khu Phố 1 Xuân An, Phan Thiết, Bình Thuận&quot;,&#xd;
                                                &quot;confidence&quot;: &quot;high&quot;,&#xd;
                                                &quot;score&quot;: 100,&#xd;
                                                &quot;additionalInfo&quot;: &quot;khu ph 1 xun an phan thit bnh thun&quot;,&#xd;
                                                &quot;street&quot;: &quot;TỔ 10&quot;,&#xd;
                                                &quot;houseNumber&quot;: &quot;&quot;,&#xd;
                                                &quot;district&quot;: &quot;THÀNH PHỐ PHAN THIẾT&quot;,&#xd;
                                                &quot;province&quot;: &quot;TỈNH BÌNH THUẬN&quot;,&#xd;
                                                &quot;zipCode&quot;: &quot;&quot;&#xd;
                                            },&#xd;
                                            &quot;gender&quot;: {&#xd;
                                                &quot;value&quot;: &quot;M&quot;,&#xd;
                                                &quot;confidence&quot;: &quot;high&quot;,&#xd;
                                                &quot;score&quot;: 100&#xd;
                                            },&#xd;
                                            &quot;idNumber&quot;: {&#xd;
                                                &quot;value&quot;: &quot;${idNumberOnboard}&quot;,&#xd;
                                                &quot;confidence&quot;: &quot;high&quot;,&#xd;
                                                &quot;score&quot;: 100&#xd;
                                            },&#xd;
                                            &quot;placeOfBirth&quot;: {&#xd;
                                                &quot;value&quot;: &quot;&quot;,&#xd;
                                                &quot;score&quot;: 0,&#xd;
                                                &quot;confidence&quot;: &quot;high&quot;&#xd;
                                            },&#xd;
                                            &quot;placeOfIssue&quot;: {&#xd;
                                                &quot;value&quot;: &quot;&quot;,&#xd;
                                                &quot;score&quot;: 0,&#xd;
                                                &quot;confidence&quot;: &quot;high&quot;&#xd;
                                            },&#xd;
                                            &quot;yearOfBirth&quot;: {&#xd;
                                                &quot;value&quot;: &quot;1998&quot;,&#xd;
                                                &quot;confidence&quot;: &quot;high&quot;,&#xd;
                                                &quot;score&quot;: 100&#xd;
                                            },&#xd;
                                            &quot;age&quot;: {&#xd;
                                                &quot;value&quot;: &quot;&quot;,&#xd;
                                                &quot;score&quot;: 0,&#xd;
                                                &quot;confidence&quot;: &quot;high&quot;&#xd;
                                            },&#xd;
                                            &quot;fatherName&quot;: {&#xd;
                                                &quot;value&quot;: &quot;&quot;,&#xd;
                                                &quot;score&quot;: 0,&#xd;
                                                &quot;confidence&quot;: &quot;high&quot;&#xd;
                                            },&#xd;
                                            &quot;motherName&quot;: {&#xd;
                                                &quot;value&quot;: &quot;&quot;,&#xd;
                                                &quot;score&quot;: 0,&#xd;
                                                &quot;confidence&quot;: &quot;high&quot;&#xd;
                                            },&#xd;
                                            &quot;husbandName&quot;: {&#xd;
                                                &quot;value&quot;: &quot;&quot;,&#xd;
                                                &quot;score&quot;: 0,&#xd;
                                                &quot;confidence&quot;: &quot;high&quot;&#xd;
                                            },&#xd;
                                            &quot;spouseName&quot;: {&#xd;
                                                &quot;value&quot;: &quot;&quot;,&#xd;
                                                &quot;score&quot;: 0,&#xd;
                                                &quot;confidence&quot;: &quot;high&quot;&#xd;
                                            },&#xd;
                                            &quot;nationality&quot;: {&#xd;
                                                &quot;value&quot;: &quot;Việt Nam&quot;,&#xd;
                                                &quot;confidence&quot;: &quot;high&quot;,&#xd;
                                                &quot;score&quot;: 100&#xd;
                                            },&#xd;
                                            &quot;mrzString&quot;: {&#xd;
                                                &quot;value&quot;: &quot;&quot;,&#xd;
                                                &quot;idNumber&quot;: &quot;&quot;,&#xd;
                                                &quot;fullName&quot;: &quot;&quot;,&#xd;
                                                &quot;gender&quot;: &quot;&quot;,&#xd;
                                                &quot;dateOfBirth&quot;: &quot;&quot;,&#xd;
                                                &quot;dateOfExpiry&quot;: &quot;&quot;,&#xd;
                                                &quot;nationality&quot;: &quot;&quot;,&#xd;
                                                &quot;score&quot;: 0,&#xd;
                                                &quot;confidence&quot;: &quot;high&quot;&#xd;
                                            },&#xd;
                                            &quot;homeTown&quot;: {&#xd;
                                                &quot;value&quot;: &quot;Đức Long, Phan Thiết, Bình Thuận&quot;,&#xd;
                                                &quot;confidence&quot;: &quot;high&quot;,&#xd;
                                                &quot;score&quot;: 100&#xd;
                                            }&#xd;
                                        },&#xd;
                                        &quot;croppedImageUrl&quot;: &quot;https://wiremock.sit.galaxyfinx.in/khoahuynhbs/khoahuynh-front.png&quot;,&#xd;
                                        &quot;isWrongSide&quot;: &quot;no&quot;,&#xd;
                                        &quot;qualityChecks&quot;: {&#xd;
                                            &quot;blur&quot;: {&#xd;
                                                &quot;value&quot;: &quot;no&quot;,&#xd;
                                                &quot;score&quot;: 100,&#xd;
                                                &quot;confidence&quot;: &quot;high&quot;&#xd;
                                            },&#xd;
                                            &quot;glare&quot;: {&#xd;
                                                &quot;value&quot;: &quot;no&quot;,&#xd;
                                                &quot;score&quot;: 10,&#xd;
                                                &quot;confidence&quot;: &quot;high&quot;&#xd;
                                            },&#xd;
                                            &quot;blackAndWhite&quot;: {&#xd;
                                                &quot;value&quot;: &quot;no&quot;,&#xd;
                                                &quot;score&quot;: 100,&#xd;
                                                &quot;confidence&quot;: &quot;high&quot;&#xd;
                                            },&#xd;
                                            &quot;partialId&quot;: {&#xd;
                                                &quot;value&quot;: &quot;no&quot;,&#xd;
                                                &quot;score&quot;: 97,&#xd;
                                                &quot;confidence&quot;: &quot;high&quot;&#xd;
                                            },&#xd;
                                            &quot;faceNotDetected&quot;: {&#xd;
                                                &quot;value&quot;: &quot;no&quot;,&#xd;
                                                &quot;score&quot;: 99,&#xd;
                                                &quot;confidence&quot;: &quot;high&quot;&#xd;
                                            }&#xd;
                                        },&#xd;
                                        &quot;tamperChecks&quot;: {&#xd;
                                            &quot;photoTampered&quot;: {&#xd;
                                                &quot;value&quot;: &quot;no&quot;,&#xd;
                                                &quot;score&quot;: 0,&#xd;
                                                &quot;confidence&quot;: &quot;high&quot;&#xd;
                                            }&#xd;
                                        },&#xd;
                                        &quot;ruleChecks&quot;: {&#xd;
                                            &quot;idNumberLengthMismatch&quot;: {&#xd;
                                                &quot;value&quot;: &quot;no&quot;,&#xd;
                                                &quot;score&quot;: 0,&#xd;
                                                &quot;confidence&quot;: &quot;high&quot;&#xd;
                                            },&#xd;
                                            &quot;expiredID&quot;: {&#xd;
                                                &quot;value&quot;: &quot;no&quot;,&#xd;
                                                &quot;score&quot;: 0,&#xd;
                                                &quot;confidence&quot;: &quot;high&quot;&#xd;
                                            },&#xd;
                                            &quot;idProvinceCodeInvalid&quot;: {&#xd;
                                                &quot;value&quot;: &quot;no&quot;,&#xd;
                                                &quot;score&quot;: 0,&#xd;
                                                &quot;confidence&quot;: &quot;high&quot;&#xd;
                                            },&#xd;
                                            &quot;idDOBGenderCodeInvalid&quot;: {&#xd;
                                                &quot;value&quot;: &quot;no&quot;,&#xd;
                                                &quot;score&quot;: 0,&#xd;
                                                &quot;confidence&quot;: &quot;high&quot;&#xd;
                                            }&#xd;
                                        }&#xd;
                                    }&#xd;
                                ],&#xd;
                                &quot;summary&quot;: {&#xd;
                                    &quot;action&quot;: &quot;pass&quot;,&#xd;
                                    &quot;details&quot;: []&#xd;
                                }&#xd;
                            }&#xd;
                        },&#xd;
                        &quot;previousAttempts&quot;: []&#xd;
                    },&#xd;
                    {&#xd;
                        &quot;module&quot;: &quot;&quot;,&#xd;
                        &quot;countrySelected&quot;: &quot;vnm&quot;,&#xd;
                        &quot;documentSelected&quot;: &quot;id&quot;,&#xd;
                        &quot;attempts&quot;: &quot;1&quot;,&#xd;
                        &quot;expectedDocumentSide&quot;: &quot;back&quot;,&#xd;
                        &quot;moduleId&quot;: &quot;id_card_validation&quot;,&#xd;
                        &quot;croppedImageUrl&quot;: &quot;https://wiremock.sit.galaxyfinx.in/khoahuynhbs/khoahuynh-back.png&quot;,&#xd;
                        &quot;imageUrl&quot;: &quot;https://wiremock.sit.galaxyfinx.in/khoahuynhbs/khoahuynh-back.png&quot;,&#xd;
                        &quot;apiResponse&quot;: {&#xd;
                            &quot;status&quot;: &quot;success&quot;,&#xd;
                            &quot;statusCode&quot;: 200,&#xd;
                            &quot;metadata&quot;: {&#xd;
                                &quot;requestId&quot;: &quot;1742445736312-330ac205-69fe-4b33-896e-c2c77bbcda7e&quot;,&#xd;
                                &quot;transactionId&quot;: &quot;1352139961703886848&quot;&#xd;
                            },&#xd;
                            &quot;result&quot;: {&#xd;
                                &quot;details&quot;: [&#xd;
                                    {&#xd;
                                        &quot;idType&quot;: &quot;cccd_chip_back&quot;,&#xd;
                                        &quot;fieldsExtracted&quot;: {&#xd;
                                            &quot;firstName&quot;: {&#xd;
                                                &quot;value&quot;: &quot;&quot;,&#xd;
                                                &quot;score&quot;: 0,&#xd;
                                                &quot;confidence&quot;: &quot;high&quot;&#xd;
                                            },&#xd;
                                            &quot;middleName&quot;: {&#xd;
                                                &quot;value&quot;: &quot;&quot;,&#xd;
                                                &quot;score&quot;: 0,&#xd;
                                                &quot;confidence&quot;: &quot;high&quot;&#xd;
                                            },&#xd;
                                            &quot;lastName&quot;: {&#xd;
                                                &quot;value&quot;: &quot;&quot;,&#xd;
                                                &quot;score&quot;: 0,&#xd;
                                                &quot;confidence&quot;: &quot;high&quot;&#xd;
                                            },&#xd;
                                            &quot;fullName&quot;: {&#xd;
                                                &quot;value&quot;: &quot;&quot;,&#xd;
                                                &quot;score&quot;: 0,&#xd;
                                                &quot;confidence&quot;: &quot;high&quot;&#xd;
                                            },&#xd;
                                            &quot;dateOfBirth&quot;: {&#xd;
                                                &quot;value&quot;: &quot;&quot;,&#xd;
                                                &quot;score&quot;: 0,&#xd;
                                                &quot;confidence&quot;: &quot;high&quot;&#xd;
                                            },&#xd;
                                            &quot;dateOfIssue&quot;: {&#xd;
                                                &quot;value&quot;: &quot;14-08-2023&quot;,&#xd;
                                                &quot;confidence&quot;: &quot;high&quot;,&#xd;
                                                &quot;score&quot;: 100&#xd;
                                            },&#xd;
                                            &quot;dateOfExpiry&quot;: {&#xd;
                                                &quot;value&quot;: &quot;&quot;,&#xd;
                                                &quot;score&quot;: 0,&#xd;
                                                &quot;confidence&quot;: &quot;high&quot;&#xd;
                                            },&#xd;
                                            &quot;countryCode&quot;: {&#xd;
                                                &quot;value&quot;: &quot;&quot;,&#xd;
                                                &quot;score&quot;: 0,&#xd;
                                                &quot;confidence&quot;: &quot;high&quot;&#xd;
                                            },&#xd;
                                            &quot;type&quot;: {&#xd;
                                                &quot;value&quot;: &quot;&quot;,&#xd;
                                                &quot;score&quot;: 0,&#xd;
                                                &quot;confidence&quot;: &quot;high&quot;&#xd;
                                            },&#xd;
                                            &quot;address&quot;: {&#xd;
                                                &quot;value&quot;: &quot;&quot;,&#xd;
                                                &quot;additionalInfo&quot;: &quot;&quot;,&#xd;
                                                &quot;street&quot;: &quot;&quot;,&#xd;
                                                &quot;houseNumber&quot;: &quot;&quot;,&#xd;
                                                &quot;district&quot;: &quot;&quot;,&#xd;
                                                &quot;province&quot;: &quot;&quot;,&#xd;
                                                &quot;zipCode&quot;: &quot;&quot;,&#xd;
                                                &quot;score&quot;: 0,&#xd;
                                                &quot;confidence&quot;: &quot;high&quot;&#xd;
                                            },&#xd;
                                            &quot;gender&quot;: {&#xd;
                                                &quot;value&quot;: &quot;&quot;,&#xd;
                                                &quot;score&quot;: 0,&#xd;
                                                &quot;confidence&quot;: &quot;high&quot;&#xd;
                                            },&#xd;
                                            &quot;idNumber&quot;: {&#xd;
                                                &quot;value&quot;: &quot;&quot;,&#xd;
                                                &quot;score&quot;: 0,&#xd;
                                                &quot;confidence&quot;: &quot;high&quot;&#xd;
                                            },&#xd;
                                            &quot;placeOfBirth&quot;: {&#xd;
                                                &quot;value&quot;: &quot;&quot;,&#xd;
                                                &quot;score&quot;: 0,&#xd;
                                                &quot;confidence&quot;: &quot;high&quot;&#xd;
                                            },&#xd;
                                            &quot;placeOfIssue&quot;: {&#xd;
                                                &quot;value&quot;: &quot;CỤC TRƯỞNG CỤC CẢNH SÁT QUẢN LÝ HÀNH CHÍNH VỀ TRẬT TỰ XÃ HỘI&quot;,&#xd;
                                                &quot;confidence&quot;: &quot;high&quot;,&#xd;
                                                &quot;score&quot;: 95&#xd;
                                            },&#xd;
                                            &quot;yearOfBirth&quot;: {&#xd;
                                                &quot;value&quot;: &quot;&quot;,&#xd;
                                                &quot;score&quot;: 0,&#xd;
                                                &quot;confidence&quot;: &quot;high&quot;&#xd;
                                            },&#xd;
                                            &quot;age&quot;: {&#xd;
                                                &quot;value&quot;: &quot;&quot;,&#xd;
                                                &quot;score&quot;: 0,&#xd;
                                                &quot;confidence&quot;: &quot;high&quot;&#xd;
                                            },&#xd;
                                            &quot;fatherName&quot;: {&#xd;
                                                &quot;value&quot;: &quot;&quot;,&#xd;
                                                &quot;score&quot;: 0,&#xd;
                                                &quot;confidence&quot;: &quot;high&quot;&#xd;
                                            },&#xd;
                                            &quot;motherName&quot;: {&#xd;
                                                &quot;value&quot;: &quot;&quot;,&#xd;
                                                &quot;score&quot;: 0,&#xd;
                                                &quot;confidence&quot;: &quot;high&quot;&#xd;
                                            },&#xd;
                                            &quot;husbandName&quot;: {&#xd;
                                                &quot;value&quot;: &quot;&quot;,&#xd;
                                                &quot;score&quot;: 0,&#xd;
                                                &quot;confidence&quot;: &quot;high&quot;&#xd;
                                            },&#xd;
                                            &quot;spouseName&quot;: {&#xd;
                                                &quot;value&quot;: &quot;&quot;,&#xd;
                                                &quot;score&quot;: 0,&#xd;
                                                &quot;confidence&quot;: &quot;high&quot;&#xd;
                                            },&#xd;
                                            &quot;nationality&quot;: {&#xd;
                                                &quot;value&quot;: &quot;&quot;,&#xd;
                                                &quot;score&quot;: 0,&#xd;
                                                &quot;confidence&quot;: &quot;high&quot;&#xd;
                                            },&#xd;
                                            &quot;mrzString&quot;: {&#xd;
                                                &quot;value&quot;: &quot;IDVNM0980002331060098000233&lt;&lt;99808302M3808300VNM&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;8HUYNH&lt;&lt;TAN&lt;KHOA&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&quot;,&#xd;
                                                &quot;confidence&quot;: &quot;high&quot;,&#xd;
                                                &quot;score&quot;: 100,&#xd;
                                                &quot;idNumber&quot;: &quot;060098000233&quot;,&#xd;
                                                &quot;fullName&quot;: &quot;HUYNH TAN KHOA&quot;,&#xd;
                                                &quot;gender&quot;: &quot;M&quot;,&#xd;
                                                &quot;dateOfBirth&quot;: &quot;30-08-1998&quot;,&#xd;
                                                &quot;dateOfExpiry&quot;: &quot;30-08-2038&quot;,&#xd;
                                                &quot;nationality&quot;: &quot;VNM&quot;&#xd;
                                            },&#xd;
                                            &quot;homeTown&quot;: {&#xd;
                                                &quot;value&quot;: &quot;&quot;,&#xd;
                                                &quot;score&quot;: 0,&#xd;
                                                &quot;confidence&quot;: &quot;high&quot;&#xd;
                                            }&#xd;
                                        },&#xd;
                                        &quot;croppedImageUrl&quot;: &quot;https://wiremock.sit.galaxyfinx.in/khoahuynhbs/khoahuynh-back.png&quot;,&#xd;
                                        &quot;isWrongSide&quot;: &quot;no&quot;,&#xd;
                                        &quot;qualityChecks&quot;: {&#xd;
                                            &quot;blur&quot;: {&#xd;
                                                &quot;value&quot;: &quot;no&quot;,&#xd;
                                                &quot;score&quot;: 100,&#xd;
                                                &quot;confidence&quot;: &quot;high&quot;&#xd;
                                            },&#xd;
                                            &quot;glare&quot;: {&#xd;
                                                &quot;value&quot;: &quot;no&quot;,&#xd;
                                                &quot;score&quot;: 10,&#xd;
                                                &quot;confidence&quot;: &quot;high&quot;&#xd;
                                            },&#xd;
                                            &quot;blackAndWhite&quot;: {&#xd;
                                                &quot;value&quot;: &quot;no&quot;,&#xd;
                                                &quot;score&quot;: 100,&#xd;
                                                &quot;confidence&quot;: &quot;high&quot;&#xd;
                                            },&#xd;
                                            &quot;partialId&quot;: {&#xd;
                                                &quot;value&quot;: &quot;no&quot;,&#xd;
                                                &quot;score&quot;: 97,&#xd;
                                                &quot;confidence&quot;: &quot;high&quot;&#xd;
                                            }&#xd;
                                        },&#xd;
                                        &quot;ruleChecks&quot;: {&#xd;
                                            &quot;mrzTampered&quot;: {&#xd;
                                                &quot;value&quot;: &quot;no&quot;,&#xd;
                                                &quot;score&quot;: 0,&#xd;
                                                &quot;confidence&quot;: &quot;high&quot;&#xd;
                                            }&#xd;
                                        }&#xd;
                                    }&#xd;
                                ],&#xd;
                                &quot;summary&quot;: {&#xd;
                                    &quot;action&quot;: &quot;pass&quot;,&#xd;
                                    &quot;details&quot;: []&#xd;
                                }&#xd;
                            }&#xd;
                        },&#xd;
                        &quot;previousAttempts&quot;: []&#xd;
                    },&#xd;
                    {&#xd;
                        &quot;module&quot;: &quot;&quot;,&#xd;
                        &quot;attempts&quot;: &quot;1&quot;,&#xd;
                        &quot;moduleId&quot;: &quot;module_selfie&quot;,&#xd;
                        &quot;imageUrl&quot;: &quot;https://wiremock.sit.galaxyfinx.in/khoahuynhbs/khoahuynh-selfie.png&quot;,&#xd;
                        &quot;apiResponse&quot;: {&#xd;
                            &quot;status&quot;: &quot;success&quot;,&#xd;
                            &quot;statusCode&quot;: 200,&#xd;
                            &quot;metadata&quot;: {&#xd;
                                &quot;requestId&quot;: &quot;1742445758678-115d413d-df10-43ec-951e-0dcd7b6fa46b&quot;,&#xd;
                                &quot;transactionId&quot;: &quot;1352139961703886848&quot;&#xd;
                            },&#xd;
                            &quot;result&quot;: {&#xd;
                                &quot;details&quot;: {&#xd;
                                    &quot;liveFace&quot;: {&#xd;
                                        &quot;value&quot;: &quot;yes&quot;,&#xd;
                                        &quot;confidence&quot;: &quot;high&quot;,&#xd;
                                        &quot;score&quot;: 100&#xd;
                                    },&#xd;
                                    &quot;qualityChecks&quot;: {&#xd;
                                        &quot;blur&quot;: {&#xd;
                                            &quot;score&quot;: 95,&#xd;
                                            &quot;value&quot;: &quot;no&quot;,&#xd;
                                            &quot;confidence&quot;: &quot;high&quot;&#xd;
                                        },&#xd;
                                        &quot;eyesClosed&quot;: {&#xd;
                                            &quot;score&quot;: 0,&#xd;
                                            &quot;value&quot;: &quot;no&quot;,&#xd;
                                            &quot;confidence&quot;: &quot;high&quot;&#xd;
                                        },&#xd;
                                        &quot;eyewear&quot;: {&#xd;
                                            &quot;score&quot;: 0,&#xd;
                                            &quot;value&quot;: &quot;no&quot;,&#xd;
                                            &quot;confidence&quot;: &quot;high&quot;&#xd;
                                        },&#xd;
                                        &quot;faceOccluded&quot;: {&#xd;
                                            &quot;score&quot;: 0,&#xd;
                                            &quot;value&quot;: &quot;no&quot;,&#xd;
                                            &quot;confidence&quot;: &quot;high&quot;&#xd;
                                        },&#xd;
                                        &quot;hat&quot;: {&#xd;
                                            &quot;score&quot;: 99,&#xd;
                                            &quot;value&quot;: &quot;no&quot;,&#xd;
                                            &quot;confidence&quot;: &quot;high&quot;&#xd;
                                        },&#xd;
                                        &quot;headTurned&quot;: {&#xd;
                                            &quot;value&quot;: &quot;no&quot;,&#xd;
                                            &quot;score&quot;: 0,&#xd;
                                            &quot;confidence&quot;: &quot;high&quot;&#xd;
                                        },&#xd;
                                        &quot;maskPresent&quot;: {&#xd;
                                            &quot;score&quot;: 0,&#xd;
                                            &quot;value&quot;: &quot;no&quot;,&#xd;
                                            &quot;confidence&quot;: &quot;high&quot;&#xd;
                                        },&#xd;
                                        &quot;multipleFaces&quot;: {&#xd;
                                            &quot;value&quot;: &quot;no&quot;,&#xd;
                                            &quot;score&quot;: 0,&#xd;
                                            &quot;confidence&quot;: &quot;high&quot;&#xd;
                                        },&#xd;
                                        &quot;nudity&quot;: {&#xd;
                                            &quot;score&quot;: 100,&#xd;
                                            &quot;value&quot;: &quot;no&quot;,&#xd;
                                            &quot;confidence&quot;: &quot;high&quot;&#xd;
                                        }&#xd;
                                    }&#xd;
                                },&#xd;
                                &quot;summary&quot;: {&#xd;
                                    &quot;action&quot;: &quot;pass&quot;,&#xd;
                                    &quot;details&quot;: []&#xd;
                                }&#xd;
                            }&#xd;
                        },&#xd;
                        &quot;previousAttempts&quot;: []&#xd;
                    },&#xd;
                    {&#xd;
                        &quot;module&quot;: &quot;&quot;,&#xd;
                        &quot;moduleId&quot;: &quot;module_facematch&quot;,&#xd;
                        &quot;idImageUrl&quot;: &quot;https://wiremock.sit.galaxyfinx.in/khoahuynhbs/khoahuynh-front.png&quot;,&#xd;
                        &quot;selfieImageUrl&quot;: &quot;https://wiremock.sit.galaxyfinx.in/khoahuynhbs/khoahuynh-selfie.png&quot;,&#xd;
                        &quot;apiResponse&quot;: {&#xd;
                            &quot;status&quot;: &quot;success&quot;,&#xd;
                            &quot;statusCode&quot;: 200,&#xd;
                            &quot;metadata&quot;: {&#xd;
                                &quot;requestId&quot;: &quot;1742445759984-8546b2f0-53d0-452c-8b7a-d9a37666e8c7&quot;,&#xd;
                                &quot;transactionId&quot;: &quot;1352139961703886848&quot;&#xd;
                            },&#xd;
                            &quot;result&quot;: {&#xd;
                                &quot;details&quot;: {&#xd;
                                    &quot;match&quot;: {&#xd;
                                        &quot;value&quot;: &quot;yes&quot;,&#xd;
                                        &quot;score&quot;: 98,&#xd;
                                        &quot;confidence&quot;: &quot;high&quot;&#xd;
                                    }&#xd;
                                },&#xd;
                                &quot;summary&quot;: {&#xd;
                                    &quot;action&quot;: &quot;pass&quot;,&#xd;
                                    &quot;details&quot;: []&#xd;
                                }&#xd;
                            }&#xd;
                        },&#xd;
                        &quot;attempts&quot;: &quot;1&quot;,&#xd;
                        &quot;previousAttempts&quot;: []&#xd;
                    }&#xd;
                ],&#xd;
                &quot;userDetails&quot;: {&#xd;
                    &quot;selfieRequestId&quot;: &quot;1742445758678-115d413d-df10-43ec-951e-0dcd7b6fa46b&quot;,&#xd;
                    &quot;facematchRequestId&quot;: &quot;1742445759984-8546b2f0-53d0-452c-8b7a-d9a37666e8c7&quot;,&#xd;
                    &quot;selfieAction&quot;: &quot;pass&quot;,&#xd;
                    &quot;facematchAction&quot;: &quot;pass&quot;&#xd;
                }&#xd;
            }&#xd;
        },&#xd;
        &quot;headers&quot;: {&#xd;
            &quot;Content-Type&quot;: &quot;application/json&quot;&#xd;
        },&#xd;
        &quot;transformers&quot;: [&#xd;
            &quot;response-template&quot;&#xd;
        ]&#xd;
    },&#xd;
    &quot;priority&quot;: 2,&#xd;
    &quot;metadata&quot;: {&#xd;
        &quot;wiremock-gui&quot;: {&#xd;
            &quot;folder&quot;: &quot;/mappings/hyperverge/jmeter&quot;&#xd;
        }&#xd;
    }&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">//log.info(&quot;-----[MOCK] Hyperverge OCR-----&quot;);

//def digits = Long.toString(${phoneNumberOnboard});
//def CCCD = &quot;044091&quot; + digits[-6..-1]
//vars.put(&quot;idNumber&quot;, CCCD)
//log.info(&quot; \n ------------------&gt; id number: &quot; + CCCD);</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="x-request-id" elementType="Header">
                  <stringProp name="Header.name">x-request-id</stringProp>
                  <stringProp name="Header.value">bdb97a68-7821-4c9a-8f91-a01c23459d6c</stringProp>
                </elementProp>
                <elementProp name="gtw-authorization" elementType="Header">
                  <stringProp name="Header.name">gtw-authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${access_token}</stringProp>
                </elementProp>
                <elementProp name="x-open-id" elementType="Header">
                  <stringProp name="Header.name">x-open-id</stringProp>
                  <stringProp name="Header.value">7b0e270b-c4f4-4cc4-826c-f324bd2d6684</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-GB,en-US;q=0.9,en;q=0.8</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Vikki%20Uat/1698985660 CFNetwork/1410.0.3 Darwin/22.6.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">OBD-Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${accessToken}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">X-KEY</stringProp>
                  <stringProp name="Header.value">${publicKey}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">import groovy.json.JsonSlurper;

log.info(&quot; \n 2.4 ---------- [MOCK] HYPERVEGER OCR - UPDATE ----------&quot;);

// ✅ Lấy thông tin từ request trước đó
def responseCode = prev.getResponseCode();
def responseMessage = prev.getResponseMessage();
def responseTime = prev.getTime(); // Response time in milliseconds
def requestUrl = prev.getURL().toString(); // Lấy URL của request
def response = prev.getResponseDataAsString().trim();

// ✅ Log thông tin cơ bản về request để hỗ trợ trace issue
log.info(requestUrl + &quot; | &quot; + responseTime + &quot;ms&quot;);


// ✅ Nếu response code != 200, log lỗi &amp; toàn bộ response để debug
if (responseCode != &quot;200&quot;) {
    log.error(&quot;❌ API Lỗi! Response Code: &quot; + responseCode + &quot; | Message: &quot; + responseMessage);
    log.error(&quot; Full Response: \n&quot; + response);
    return;
}

// ✅ Parse JSON an toàn
def jsonResponse;
try {
    jsonResponse = new JsonSlurper().parseText(response);
} catch (Exception e) {
    log.error(&quot;❌ Lỗi parse JSON: &quot; + e.getMessage());
    log.error(&quot; Full Response: \n&quot; + response);
    return;
}

// ✅ Trích xuất `idHyperVergeOCR`
def idHyperVergeOCR = jsonResponse?.id ?: null

// ✅ Kiểm tra idHyperVergeOCR
if (idHyperVergeOCR) {
    vars.put(&quot;idHyperVergeOCR&quot;, idHyperVergeOCR);
    log.info(&quot;✅ idHyperVergeOCR Extracted: &quot; + idHyperVergeOCR);
} else {
    log.error(&quot;❌ idHyperVergeOCR not found!&quot;);
}</stringProp>
            </JSR223PostProcessor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="2.5 [MOCK] HDB biometric">
            <intProp name="HTTPSampler.concurrentPool">6</intProp>
            <stringProp name="HTTPSampler.domain">wiremock.sit.galaxyfinx.in</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">__admin/mappings/${hdbBiometricMockingId}</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">PUT</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
    &quot;name&quot;: &quot;jmeter-hdb-biometric-khoahuynh-bs&quot;,&#xd;
    &quot;persistent&quot;: true,&#xd;
    &quot;request&quot;: {&#xd;
        &quot;url&quot;: &quot;/hdb-biometric/face-service/v1/customer/list-filter?card_id=${idNumberOnboard}&quot;,&#xd;
        &quot;method&quot;: &quot;GET&quot;&#xd;
    },&#xd;
    &quot;response&quot;: {&#xd;
        &quot;status&quot;: 200,&#xd;
        &quot;jsonBody&quot;: {&#xd;
            &quot;transaction_id&quot;: &quot;4c1d85f7-4f84-4cfe-980d-882261d60065&quot;,&#xd;
            &quot;log_id&quot;: &quot;476291cb-05ef-11f0-9ba6-01fa263ac6e8-409578ae-apigateway-service-84d657594f-svzwm&quot;,&#xd;
            &quot;data_base64&quot;: &quot;eyJ0cmFuc2FjdGlvbl9pZCI6IjRjMWQ4NWY3LTRmODQtNGNmZS05ODBkLTg4MjI2MWQ2MDA2NSIsImxvZ19pZCI6IjQ3NjI5MWNiLTA1ZWYtMTFmMC05YmE2LTAxZmEyNjNhYzZlOC00MDk1NzhhZS1hcGlnYXRld2F5LXNlcnZpY2UtODRkNjU3NTk0Zi1zdnp3bSIsIm1lc3NhZ2UiOiJJREctMDAwMDAwMDAiLCJvYmplY3QiOnsiY3VzdG9tZXJfZmFjZXMiOlt7ImltYWdlX3VybCI6ImVreWMtY2ljL3Zla3ljdXBsb2FkL2RkNWY4Yjk4LThmODEtNDI2YS05NTYyLWNiOGIxMGFlZTQwNS8yMDI1MDMxNy8yZmI3OWMzMC0wMzA0LTExZjAtYWUwYi1mZmZjNjMxYWE2ZWUuanBlZyIsImdyb3VwX2N1c3RvbWVyIjoiRmFjZSBzZWxmaWUiLCJjaGFubmVsIjoiVklLS0kiLCJ2ZXJpZnlfc3RhdHVzIjowLCJjcmVhdGVkX2RhdGUiOiIxNy8wMy8yMDI1IDE0OjQ4OjIxIiwic3RhdHVzIjowfSx7ImltYWdlX3VybCI6ImVreWMtY2ljL3Zla3ljdXBsb2FkL2RkNWY4Yjk4LThmODEtNDI2YS05NTYyLWNiOGIxMGFlZTQwNS8yMDI1MDMxOC81ZGU0MDlmNC0wM2NkLTExZjAtYWUwYi03N2U4ZThkODc0ZWEuanBlZyIsImdyb3VwX2N1c3RvbWVyIjoiRmFjZSBzZWxmaWUiLCJjaGFubmVsIjoiVklLS0kiLCJ2ZXJpZnlfc3RhdHVzIjowLCJjcmVhdGVkX2RhdGUiOiIxOC8wMy8yMDI1IDE0OjQ4OjI2Iiwic3RhdHVzIjowfSx7ImltYWdlX3VybCI6ImVreWMtY2ljL3Zla3ljdXBsb2FkL2RkNWY4Yjk4LThmODEtNDI2YS05NTYyLWNiOGIxMGFlZTQwNS8yMDI1MDMxOC9kYjI1MTAxMC0wM2Y3LTExZjAtYWU0NC0xZmE3ZmNjNDIzZWYuanBlZyIsImdyb3VwX2N1c3RvbWVyIjoiRmFjZSBzZWxmaWUiLCJjaGFubmVsIjoiVklLS0kiLCJ2ZXJpZnlfc3RhdHVzIjowLCJjcmVhdGVkX2RhdGUiOiIxOC8wMy8yMDI1IDE5OjUyOjM1Iiwic3RhdHVzIjowfSx7ImltYWdlX3VybCI6ImVreWMtY2ljL3Zla3ljdXBsb2FkL2RkNWY4Yjk4LThmODEtNDI2YS05NTYyLWNiOGIxMGFlZTQwNS8yMDI1MDMxOS8xYTU4YTc3Mi0wNGIzLTExZjAtYWUwYi1hOTNhZDdlZTM4OTUuanBlZyIsImdyb3VwX2N1c3RvbWVyIjoiRmFjZSBzZWxmaWUiLCJjaGFubmVsIjoiVklLS0kiLCJ2ZXJpZnlfc3RhdHVzIjowLCJjcmVhdGVkX2RhdGUiOiIxOS8wMy8yMDI1IDE4OjEyOjU4Iiwic3RhdHVzIjowfSx7ImltYWdlX3VybCI6ImVreWMtY2ljL3Zla3ljdXBsb2FkL2RkNWY4Yjk4LThmODEtNDI2YS05NTYyLWNiOGIxMGFlZTQwNS8yMDI1MDMxNy8zMGE4M2RjMS0wMzA0LTExZjAtYWUwYi1lNWIxOTdmMjNhY2YuanBlZyIsImdyb3VwX2N1c3RvbWVyIjoiRmFjZSBjaGlwIiwiY2hhbm5lbCI6IlZJS0tJIiwidmVyaWZ5X3N0YXR1cyI6MSwiY3JlYXRlZF9kYXRlIjoiMTcvMDMvMjAyNSAxNDo0ODoyMSIsInN0YXR1cyI6MX1dLCJ1dWlkX2N1c3RvbWVyIjoiNzZhOGUxZTEtMTc0NS00MDg1LTliN2EtODgyNjAzZDE1NWU4IiwiY3VzdG9tZXJfY2FyZHMiOlt7Im9yaWdpbl9sb2NhdGlvbiI6IsSQ4bupYyBMb25nLCBQaGFuIFRoaeG6v3QsIELDrG5oIFRodeG6rW4iLCJyZWNlbnRfbG9jYXRpb24iOiJJMzUsMzYsIMSQxrDhu51uZyDEkGluaCBM4buFLCBU4buVIDEwLCBLaHUgUGjhu5EgMSwgWHXDom4gQW4sIFBoYW4gVGhp4bq/dCwgQsOsbmggVGh14bqtbiIsImV0aG5pYyI6IktpbmgiLCJnZW5kZXIiOiJOYW0iLCJkYWRfbmFtZSI6Ikh14buzbmggVOG6pW4gVGjDtG5nIiwicmVzdWx0X2MwNiI6eyJzaWduYXR1cmUiOiJLbzI3bE9wdFRZdThUTzZJVlpyUndMZVRiUEpRbzBqZG5jYnFHS05TQnk4aG9Ta1lkM0h5NnV4NVRSK00ycUVZc3lZT2ZNYmlwTTZ0NC9EMlNsK3FxazhGVEJTWGdOQ1ZrTFFiTDNhcFZySld4Ukc0K29TMTRDcXZZOG1lV0RpSmh0Rk8rTmdZSXljb0xTWUkxQ2cxbmJyMnd4MHdOU0lpYWRyY0ZnWUtBeEIzTmw3dHBlQ1NuTXlCS0tVZjZEaXR0U3N6cGlrZkxvK29EbXYvZTFST3VkVlNDRW9nOStTV2YzenJFNnFmRVprSzRld2UydDhiQlFHUzRpYWlGRWp4YXpqbzg5cnBhZDY4WlVIbmhDQXNmQy9XdGlwUW5MeExBMksrUlZ5bFJEQitNNkkrYSs2aFJRbWFmRXYzNHBKVkd4QU9FM2t1aFpwamp5UEppdEFMbXc9PSIsInJlc3BvbmRzIjp7InJlc3VsdCI6dHJ1ZSwicmVzcG9uc2VfaWQiOiJ2bnB0LTAwMDAwMDAwLTAwMDAtMDAwMC0wMDAwLTAwMDAwMDAwMDAwMCIsImV4aXRjb2RlIjowLCJ0aW1lIjowLCJtZXNzYWdlIjoidmFsaWQgaWRjYXJkIiwicmVzcG9uc2VJZCI6InZucHQtMDAwMDAwMDAtMDAwMC0wMDAwLTAwMDAtMDAwMDAwMDAwMDAwIn19LCJyZWxpZ2lvbiI6Iktow7RuZyIsImJpcnRoX2RheSI6IjMwLzA4LzE5OTgiLCJmZWF0dXJlcyI6Ik7hu5F0IHJ14buTaSBjOiAyY20gZMaw4bubaSB0csaw4bubYyBtw6lwIHBo4bqjaSIsInZhbGlkX2RhdGUiOiIzMC8wOC8yMDM4Iiwic3BvdXNlX25hbWUiOiIiLCJtcnoiOiJbSURWTk0wOTgwMDAyMzMxMDYwMDk4MDAwMjMzPDw5LCA5ODA4MzAyTTM4MDgzMDBWTk08PDw8PDw8PDw8PDgsIEhVWU5IPDxUQU48S0hPQTw8PDw8PDw8PDw8PDw8PF0iLCJuYXRpb25hbGl0eSI6IlZp4buHdCBOYW0iLCJpc3N1ZV9kYXRlIjoiMTQvMDgvMjAyMyIsIm5hbWUiOiJIdeG7s25oIFThuqVuIEtob2EiLCJvbGRfaWQiOiIyNjE1NDExMDEiLCJpZCI6IjA2MDA5ODAwMDIzMyIsIm1vbV9uYW1lIjoiTmfDtCBNaW5oIFV54buDbiBQaMaw4bujbmcifV19fQ==&quot;,&#xd;
            &quot;data_sign&quot;: &quot;PG803UIRTDi/nVNeIHMQFGLYPFrn+ubf0UemBWVSeodmTsuIkW09tKyBvJDssD9rD3DpayRLljAphpsG5PbVGHZVVQG2QkOZIghDQLkkI3NJKYVT3wgnSXaWkkpEmosv5YR/P4lR+ouseFB05JAXk/zhOcMh9MMUCbkknlvwVVMK1aumUjkwoCWELrcit5TiG04EI/LMq9SBgEpFyLhusBK/wJhRpBrOtSiR+LSszAVIs1Gyw+h2AOfz6pUmpdvSAhWxDxiXL9uUSm889rDUjewjHJgcYbFsd0K0X/VDrKAG+E34SijR+Z0BKCMPHxBVVh0mdM26ynmJvkco6zF2lQ==&quot;,&#xd;
            &quot;message&quot;: &quot;IDG-00000000&quot;,&#xd;
            &quot;object&quot;: {&#xd;
                &quot;customer_faces&quot;: [&#xd;
                    {&#xd;
                        &quot;image_url&quot;: &quot;ekyc-cic/vekycupload/dd5f8b98-8f81-426a-9562-cb8b10aee405/20250317/2fb79c30-0304-11f0-ae0b-fffc631aa6ee.jpeg&quot;,&#xd;
                        &quot;group_customer&quot;: &quot;Face selfie&quot;,&#xd;
                        &quot;channel&quot;: &quot;VIKKI&quot;,&#xd;
                        &quot;verify_status&quot;: 0,&#xd;
                        &quot;created_date&quot;: &quot;17/03/2025 14:48:21&quot;,&#xd;
                        &quot;status&quot;: 0&#xd;
                    },&#xd;
                    {&#xd;
                        &quot;image_url&quot;: &quot;ekyc-cic/vekycupload/dd5f8b98-8f81-426a-9562-cb8b10aee405/20250318/5de409f4-03cd-11f0-ae0b-77e8e8d874ea.jpeg&quot;,&#xd;
                        &quot;group_customer&quot;: &quot;Face selfie&quot;,&#xd;
                        &quot;channel&quot;: &quot;VIKKI&quot;,&#xd;
                        &quot;verify_status&quot;: 0,&#xd;
                        &quot;created_date&quot;: &quot;18/03/2025 14:48:26&quot;,&#xd;
                        &quot;status&quot;: 0&#xd;
                    },&#xd;
                    {&#xd;
                        &quot;image_url&quot;: &quot;ekyc-cic/vekycupload/dd5f8b98-8f81-426a-9562-cb8b10aee405/20250318/db251010-03f7-11f0-ae44-1fa7fcc423ef.jpeg&quot;,&#xd;
                        &quot;group_customer&quot;: &quot;Face selfie&quot;,&#xd;
                        &quot;channel&quot;: &quot;VIKKI&quot;,&#xd;
                        &quot;verify_status&quot;: 0,&#xd;
                        &quot;created_date&quot;: &quot;18/03/2025 19:52:35&quot;,&#xd;
                        &quot;status&quot;: 0&#xd;
                    },&#xd;
                    {&#xd;
                        &quot;image_url&quot;: &quot;ekyc-cic/vekycupload/dd5f8b98-8f81-426a-9562-cb8b10aee405/20250319/1a58a772-04b3-11f0-ae0b-a93ad7ee3895.jpeg&quot;,&#xd;
                        &quot;group_customer&quot;: &quot;Face selfie&quot;,&#xd;
                        &quot;channel&quot;: &quot;VIKKI&quot;,&#xd;
                        &quot;verify_status&quot;: 0,&#xd;
                        &quot;created_date&quot;: &quot;19/03/2025 18:12:58&quot;,&#xd;
                        &quot;status&quot;: 0&#xd;
                    },&#xd;
                    {&#xd;
                        &quot;image_url&quot;: &quot;ekyc-cic/vekycupload/dd5f8b98-8f81-426a-9562-cb8b10aee405/20250317/30a83dc1-0304-11f0-ae0b-e5b197f23acf.jpeg&quot;,&#xd;
                        &quot;group_customer&quot;: &quot;Face chip&quot;,&#xd;
                        &quot;channel&quot;: &quot;VIKKI&quot;,&#xd;
                        &quot;verify_status&quot;: 1,&#xd;
                        &quot;created_date&quot;: &quot;17/03/2025 14:48:21&quot;,&#xd;
                        &quot;status&quot;: 1&#xd;
                    }&#xd;
                ],&#xd;
                &quot;uuid_customer&quot;: &quot;76a8e1e1-1745-4085-9b7a-882603d155e8&quot;,&#xd;
                &quot;customer_cards&quot;: [&#xd;
                    {&#xd;
                        &quot;origin_location&quot;: &quot;Đức Long, Phan Thiết, Bình Thuận&quot;,&#xd;
                        &quot;recent_location&quot;: &quot;I35,36, Đường Đinh Lễ, Tổ 10, Khu Phố 1, Xuân An, Phan Thiết, Bình Thuận&quot;,&#xd;
                        &quot;ethnic&quot;: &quot;Kinh&quot;,&#xd;
                        &quot;gender&quot;: &quot;Nam&quot;,&#xd;
                        &quot;dad_name&quot;: &quot;Huỳnh Tấn Thông&quot;,&#xd;
                        &quot;result_c06&quot;: {&#xd;
                            &quot;signature&quot;: &quot;Ko27lOptTYu8TO6IVZrRwLeTbPJQo0jdncbqGKNSBy8hoSkYd3Hy6ux5TR+M2qEYsyYOfMbipM6t4/D2Sl+qqk8FTBSXgNCVkLQbL3apVrJWxRG4+oS14CqvY8meWDiJhtFO+NgYIycoLSYI1Cg1nbr2wx0wNSIiadrcFgYKAxB3Nl7tpeCSnMyBKKUf6DittSszpikfLo+oDmv/e1ROudVSCEog9+SWf3zrE6qfEZkK4ewe2t8bBQGS4iaiFEjxazjo89rpad68ZUHnhCAsfC/WtipQnLxLA2K+RVylRDB+M6I+a+6hRQmafEv34pJVGxAOE3kuhZpjjyPJitALmw==&quot;,&#xd;
                            &quot;responds&quot;: {&#xd;
                                &quot;result&quot;: true,&#xd;
                                &quot;response_id&quot;: &quot;vnpt-00000000-0000-0000-0000-000000000000&quot;,&#xd;
                                &quot;exitcode&quot;: 0,&#xd;
                                &quot;time&quot;: 0,&#xd;
                                &quot;message&quot;: &quot;valid idcard&quot;,&#xd;
                                &quot;responseId&quot;: &quot;vnpt-00000000-0000-0000-0000-000000000000&quot;&#xd;
                            }&#xd;
                        },&#xd;
                        &quot;religion&quot;: &quot;Không&quot;,&#xd;
                        &quot;birth_day&quot;: &quot;30/08/1998&quot;,&#xd;
                        &quot;features&quot;: &quot;Nốt ruồi c: 2cm dưới trước mép phải&quot;,&#xd;
                        &quot;valid_date&quot;: &quot;30/08/2038&quot;,&#xd;
                        &quot;spouse_name&quot;: &quot;&quot;,&#xd;
                        &quot;mrz&quot;: &quot;[IDVNM0980002331060098000233&lt;&lt;9, 9808302M3808300VNM&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;8, HUYNH&lt;&lt;TAN&lt;KHOA&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;]&quot;,&#xd;
                        &quot;nationality&quot;: &quot;Việt Nam&quot;,&#xd;
                        &quot;issue_date&quot;: &quot;14/08/2023&quot;,&#xd;
                        &quot;name&quot;: &quot;Huỳnh Tấn Khoa&quot;,&#xd;
                        &quot;old_id&quot;: &quot;261541101&quot;,&#xd;
                        &quot;id&quot;: &quot;${idNumberOnboard}&quot;,&#xd;
                        &quot;mom_name&quot;: &quot;Ngô Minh Uyển Phượng&quot;&#xd;
                    }&#xd;
                ]&#xd;
            }&#xd;
        },&#xd;
        &quot;headers&quot;: {&#xd;
            &quot;Content-Type&quot;: &quot;application/json&quot;&#xd;
        },&#xd;
        &quot;transformers&quot;: [&#xd;
            &quot;response-template&quot;&#xd;
        ]&#xd;
    },&#xd;
    &quot;priority&quot;: 2,&#xd;
    &quot;metadata&quot;: {&#xd;
        &quot;wiremock-gui&quot;: {&#xd;
            &quot;folder&quot;: &quot;/mappings/hdb-biometric/jmeter&quot;&#xd;
        }&#xd;
    }&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="x-request-id" elementType="Header">
                  <stringProp name="Header.name">x-request-id</stringProp>
                  <stringProp name="Header.value">bdb97a68-7821-4c9a-8f91-a01c23459d6c</stringProp>
                </elementProp>
                <elementProp name="gtw-authorization" elementType="Header">
                  <stringProp name="Header.name">gtw-authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${access_token}</stringProp>
                </elementProp>
                <elementProp name="x-open-id" elementType="Header">
                  <stringProp name="Header.name">x-open-id</stringProp>
                  <stringProp name="Header.value">7b0e270b-c4f4-4cc4-826c-f324bd2d6684</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-GB,en-US;q=0.9,en;q=0.8</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Vikki%20Uat/1698985660 CFNetwork/1410.0.3 Darwin/22.6.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">OBD-Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${accessToken}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">X-KEY</stringProp>
                  <stringProp name="Header.value">${publicKey}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">import groovy.json.JsonSlurper;

log.info(&quot; \n 2.5 ---------- [MOCK] HDB BIOMETRIC ----------&quot;);

// ✅ Lấy thông tin từ request trước đó
def responseCode = prev.getResponseCode();
def responseMessage = prev.getResponseMessage();
def responseTime = prev.getTime(); // Response time in milliseconds
def requestUrl = prev.getURL().toString(); // Lấy URL của request
def response = prev.getResponseDataAsString().trim();

// ✅ Log thông tin cơ bản về request để hỗ trợ trace issue
log.info(requestUrl + &quot; | &quot; + responseTime + &quot;ms&quot;);


// ✅ Nếu response code != 200, log lỗi &amp; toàn bộ response để debug
if (responseCode != &quot;200&quot;) {
    log.error(&quot;❌ API Lỗi! Response Code: &quot; + responseCode + &quot; | Message: &quot; + responseMessage);
    log.error(&quot; Full Response: \n&quot; + response);
    return;
}

// ✅ Parse JSON an toàn
def jsonResponse;
try {
    jsonResponse = new JsonSlurper().parseText(response);
} catch (Exception e) {
    log.error(&quot;❌ Lỗi parse JSON: &quot; + e.getMessage());
    log.error(&quot; Full Response: \n&quot; + response);
    return;
}

// ✅ Trích xuất `hdbBiometricMockingId`
def hdbBiometricMockingId = jsonResponse?.id ?: null

// ✅ Kiểm tra hdbBiometricMockingId
if (hdbBiometricMockingId) {
    vars.put(&quot;hdbBiometricMockingId&quot;, hdbBiometricMockingId);
    log.info(&quot;✅ HDB Biometric Mock ID Extracted: &quot; + hdbBiometricMockingId);
} else {
    log.error(&quot;❌ HDB Biometric Mock ID not found!&quot;);
}</stringProp>
            </JSR223PostProcessor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="2.6 Pre check KYC" enabled="true">
            <intProp name="HTTPSampler.concurrentPool">6</intProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/v4/onboarding/kyc/pre-check-kyc</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="x-request-id" elementType="Header">
                  <stringProp name="Header.name">x-request-id</stringProp>
                  <stringProp name="Header.value">bdb97a68-7821-4c9a-8f91-a01c23459d6c</stringProp>
                </elementProp>
                <elementProp name="gtw-authorization" elementType="Header">
                  <stringProp name="Header.name">gtw-authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${access_token}</stringProp>
                </elementProp>
                <elementProp name="x-open-id" elementType="Header">
                  <stringProp name="Header.name">x-open-id</stringProp>
                  <stringProp name="Header.value">7b0e270b-c4f4-4cc4-826c-f324bd2d6684</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-GB,en-US;q=0.9,en;q=0.8</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Vikki%20Uat/1698985660 CFNetwork/1410.0.3 Darwin/22.6.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">OBD-Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${accessToken}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">X-KEY</stringProp>
                  <stringProp name="Header.value">${publicKey}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">import groovy.json.JsonSlurper;

log.info(&quot; \n 2.6 ---------- PRECHECK KYC ----------&quot;);

// ✅ Lấy thông tin từ request trước đó
def responseCode = prev.getResponseCode();
def responseMessage = prev.getResponseMessage();
def responseTime = prev.getTime(); // Response time in milliseconds
def requestUrl = prev.getURL().toString(); // Lấy URL của request
def response = prev.getResponseDataAsString().trim();

// ✅ Log thông tin cơ bản về request để hỗ trợ trace issue
log.info(requestUrl + &quot; | &quot; + responseTime + &quot;ms&quot;);


// ✅ Nếu response code != 200, log lỗi &amp; toàn bộ response để debug
if (responseCode != &quot;200&quot;) {
    log.error(&quot;❌ API Lỗi! Response Code: &quot; + responseCode + &quot; | Message: &quot; + responseMessage);
    log.error(&quot; Full Response: \n&quot; + response);
    return;
}

// ✅ Parse JSON an toàn
def jsonResponse;
try {
    jsonResponse = new JsonSlurper().parseText(response);
} catch (Exception e) {
    log.error(&quot;❌ Lỗi parse JSON: &quot; + e.getMessage());
    log.error(&quot; Full Response: \n&quot; + response);
    return;
}

// ✅ Log kết quả Precheck KYC
log.info(&quot;✅ Precheck KYC thành công! Response: &quot; + jsonResponse);</stringProp>
            </JSR223PostProcessor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="2.7 Submit info" enabled="true">
            <intProp name="HTTPSampler.concurrentPool">6</intProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/v4/onboarding/kyc/submit-info</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
	&quot;fullName&quot; : &quot;${fullName}&quot;,&#xd;
     &quot;currentAddress&quot;: &quot;Test Address&quot;,&#xd;
	&quot;oldIdNumber&quot;: &quot;123123123&quot;,&#xd;
	&quot;languageCode&quot;: &quot;VI&quot;,&#xd;
	&quot;email&quot; : &quot;api@test.com&quot;,&#xd;
	&quot;isFatca&quot;: false,&#xd;
	&quot;isPep&quot;: false,&#xd;
	&quot;occupationCode&quot;: &quot;OC022&quot;,&#xd;
	&quot;jobPositionCode&quot;: &quot;P001&quot;,&#xd;
	&quot;issueDate&quot;: &quot;03-07-2013&quot;&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="x-request-id" elementType="Header">
                  <stringProp name="Header.name">x-request-id</stringProp>
                  <stringProp name="Header.value">bdb97a68-7821-4c9a-8f91-a01c23459d6c</stringProp>
                </elementProp>
                <elementProp name="gtw-authorization" elementType="Header">
                  <stringProp name="Header.name">gtw-authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${access_token}</stringProp>
                </elementProp>
                <elementProp name="x-open-id" elementType="Header">
                  <stringProp name="Header.name">x-open-id</stringProp>
                  <stringProp name="Header.value">7b0e270b-c4f4-4cc4-826c-f324bd2d6684</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-GB,en-US;q=0.9,en;q=0.8</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Vikki%20Uat/1698985660 CFNetwork/1410.0.3 Darwin/22.6.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">OBD-Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${accessToken}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">X-KEY</stringProp>
                  <stringProp name="Header.value">${publicKey}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">import groovy.json.JsonSlurper;

log.info(&quot; \n 2.7 ---------- SUBMIT INFO ----------&quot;);

// ✅ Lấy thông tin từ request trước đó
def responseCode = prev.getResponseCode();
def responseMessage = prev.getResponseMessage();
def responseTime = prev.getTime(); // Response time in milliseconds
def requestUrl = prev.getURL().toString(); // Lấy URL của request
def response = prev.getResponseDataAsString().trim();

// ✅ Log thông tin cơ bản về request để hỗ trợ trace issue
log.info(requestUrl + &quot; | &quot; + responseTime + &quot;ms&quot;);


// ✅ Nếu response code != 200, log lỗi &amp; toàn bộ response để debug
if (responseCode != &quot;200&quot;) {
    log.error(&quot;❌ API Lỗi! Response Code: &quot; + responseCode + &quot; | Message: &quot; + responseMessage);
    log.error(&quot; Full Response: \n&quot; + response);
    return;
}

// ✅ Parse JSON an toàn
def jsonResponse;
try {
    jsonResponse = new JsonSlurper().parseText(response);
} catch (Exception e) {
    log.error(&quot;❌ Lỗi parse JSON: &quot; + e.getMessage());
    log.error(&quot; Full Response: \n&quot; + response);
    return;
}

// ✅ Log kết quả Submit Info
log.info(&quot;✅ Submit Info thành công! Response: &quot; + jsonResponse);</stringProp>
            </JSR223PostProcessor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="2.8 Create Password" enabled="true">
            <intProp name="HTTPSampler.concurrentPool">6</intProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/v4/onboarding/accountCreation/credential</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value"> { &#xd;
    &quot;password&quot;: &quot;QWJjZDEyMw==&quot;&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="x-request-id" elementType="Header">
                  <stringProp name="Header.name">x-request-id</stringProp>
                  <stringProp name="Header.value">bdb97a68-7821-4c9a-8f91-a01c23459d6c</stringProp>
                </elementProp>
                <elementProp name="gtw-authorization" elementType="Header">
                  <stringProp name="Header.name">gtw-authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${access_token}</stringProp>
                </elementProp>
                <elementProp name="x-open-id" elementType="Header">
                  <stringProp name="Header.name">x-open-id</stringProp>
                  <stringProp name="Header.value">7b0e270b-c4f4-4cc4-826c-f324bd2d6684</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-GB,en-US;q=0.9,en;q=0.8</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Vikki%20Uat/1698985660 CFNetwork/1410.0.3 Darwin/22.6.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">x-session-id</stringProp>
                  <stringProp name="Header.value">${sessionId}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">OBD-Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${accessToken}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">X-KEY</stringProp>
                  <stringProp name="Header.value">${publicKey}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">import groovy.json.JsonSlurper;

log.info(&quot; \n 2.8 ---------- CREATE PASSWORD ----------&quot;);

// ✅ Lấy thông tin từ request trước đó
def responseCode = prev.getResponseCode();
def responseMessage = prev.getResponseMessage();
def responseTime = prev.getTime(); // Response time in milliseconds
def requestUrl = prev.getURL().toString(); // Lấy URL của request
def response = prev.getResponseDataAsString().trim();

// ✅ Log thông tin cơ bản về request để hỗ trợ trace issue
log.info(requestUrl + &quot; | &quot; + responseTime + &quot;ms&quot;);


// ✅ Nếu response code != 200, log lỗi &amp; toàn bộ response để debug
if (responseCode != &quot;200&quot;) {
    log.error(&quot;❌ API Lỗi! Response Code: &quot; + responseCode + &quot; | Message: &quot; + responseMessage);
    log.error(&quot; Full Response: \n&quot; + response);
    return;
}

// ✅ Parse JSON an toàn
def jsonResponse;
try {
    jsonResponse = new JsonSlurper().parseText(response);
} catch (Exception e) {
    log.error(&quot;❌ Lỗi parse JSON: &quot; + e.getMessage());
    log.error(&quot; Full Response: \n&quot; + response);
    return;
}

// ✅ Trích xuất `cifNumber`
def cifNumber = jsonResponse?.payload?.cifId ?: null

// ✅ Kiểm tra cifNumber
if (cifNumber) {
    vars.put(&quot;cifNumber&quot;, cifNumber);
    log.info(&quot;✅ Tạo mật khẩu thành công! CIF Number: &quot; + cifNumber);
} else {
    log.error(&quot;❌ CIF NUMBER NOT FOUND!&quot;);
}</stringProp>
            </JSR223PostProcessor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="2.9 Triger face dedup" enabled="true">
            <intProp name="HTTPSampler.concurrentPool">6</intProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/v3/onboarding/kyc/check-face-dedup</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{ &#xd;
    &quot;os&quot;: &quot;IOS&quot;&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="x-request-id" elementType="Header">
                  <stringProp name="Header.name">x-request-id</stringProp>
                  <stringProp name="Header.value">bdb97a68-7821-4c9a-8f91-a01c23459d6c</stringProp>
                </elementProp>
                <elementProp name="gtw-authorization" elementType="Header">
                  <stringProp name="Header.name">gtw-authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${access_token}</stringProp>
                </elementProp>
                <elementProp name="x-open-id" elementType="Header">
                  <stringProp name="Header.name">x-open-id</stringProp>
                  <stringProp name="Header.value">7b0e270b-c4f4-4cc4-826c-f324bd2d6684</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-GB,en-US;q=0.9,en;q=0.8</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Vikki%20Uat/1698985660 CFNetwork/1410.0.3 Darwin/22.6.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">x-session-id</stringProp>
                  <stringProp name="Header.value">${sessionId}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">OBD-Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${accessToken}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">X-KEY</stringProp>
                  <stringProp name="Header.value">${publicKey}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">import groovy.json.JsonSlurper;

log.info(&quot; \n 2.9 ---------- TRIGGER FACEDEDUP ----------&quot;);

// ✅ Lấy thông tin từ request trước đó
def responseCode = prev.getResponseCode();
def responseMessage = prev.getResponseMessage();
def responseTime = prev.getTime(); // Response time in milliseconds
def requestUrl = prev.getURL().toString(); // Lấy URL của request
def response = prev.getResponseDataAsString().trim();

// ✅ Log thông tin cơ bản về request để hỗ trợ trace issue
log.info(requestUrl + &quot; | &quot; + responseTime + &quot;ms&quot;);


// ✅ Nếu response code != 200, log lỗi &amp; toàn bộ response để debug
if (responseCode != &quot;200&quot;) {
    log.error(&quot;❌ API Lỗi! Response Code: &quot; + responseCode + &quot; | Message: &quot; + responseMessage);
    log.error(&quot; Full Response: \n&quot; + response);
    return;
}

// ✅ Parse JSON an toàn
def jsonResponse;
try {
    jsonResponse = new JsonSlurper().parseText(response);
} catch (Exception e) {
    log.error(&quot;❌ Lỗi parse JSON: &quot; + e.getMessage());
    log.error(&quot; Full Response: \n&quot; + response);
    return;
}

// ✅ Log kết quả Facededup Trigger
log.info(&quot;✅ Facededup Trigger thành công! Response: &quot; + jsonResponse);</stringProp>
            </JSR223PostProcessor>
            <hashTree/>
          </hashTree>
          <WhileController guiclass="WhileControllerGui" testclass="WhileController" testname="2.10 While loop to get KYC status" enabled="true">
            <stringProp name="WhileController.condition">${__groovy(
    def attempts = (vars.get(&quot;attempts&quot;) ?: &quot;0&quot;) as Integer;
    def kycStatus = vars.get(&quot;kycStatus&quot;);

    if (kycStatus == &quot;APPROVED&quot;) return false;
    if (attempts &gt;= 30) return false;
    
    return kycStatus == null || 
           kycStatus == &quot;N_A&quot; || 
           kycStatus == &quot;NEEDS_REVIEW&quot;
)}</stringProp>
          </WhileController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="2.10.1 Get KYC status" enabled="true">
              <intProp name="HTTPSampler.concurrentPool">6</intProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/v3/onboarding/kyc/kyc-status-with-details</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="x-request-id" elementType="Header">
                    <stringProp name="Header.name">x-request-id</stringProp>
                    <stringProp name="Header.value">bdb97a68-7821-4c9a-8f91-a01c23459d6c</stringProp>
                  </elementProp>
                  <elementProp name="gtw-authorization" elementType="Header">
                    <stringProp name="Header.name">gtw-authorization</stringProp>
                    <stringProp name="Header.value">Bearer ${access_token}</stringProp>
                  </elementProp>
                  <elementProp name="x-open-id" elementType="Header">
                    <stringProp name="Header.name">x-open-id</stringProp>
                    <stringProp name="Header.value">7b0e270b-c4f4-4cc4-826c-f324bd2d6684</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Language" elementType="Header">
                    <stringProp name="Header.name">Accept-Language</stringProp>
                    <stringProp name="Header.value">en-GB,en-US;q=0.9,en;q=0.8</stringProp>
                  </elementProp>
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Encoding" elementType="Header">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip, deflate, br</stringProp>
                  </elementProp>
                  <elementProp name="User-Agent" elementType="Header">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Vikki%20Uat/1698985660 CFNetwork/1410.0.3 Darwin/22.6.0</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">x-session-id</stringProp>
                    <stringProp name="Header.value">${sessionId}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">OBD-Authorization</stringProp>
                    <stringProp name="Header.value">Bearer ${accessToken}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">X-KEY</stringProp>
                    <stringProp name="Header.value">${publicKey}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">import groovy.json.JsonSlurper;

// ✅ Tăng số lần thử kiểm tra KYC
def attempts = Integer.parseInt(vars.get(&quot;attempts&quot;) ?: &quot;0&quot;) + 1;
vars.put(&quot;attempts&quot;, String.valueOf(attempts));

log.info(&quot; \n 2.10.1 ---------- CHECKING KYC STATUS &quot; + attempts +&quot; ----------&quot;);

// ✅ Lấy thông tin từ request trước đó
def responseCode = prev.getResponseCode();
def responseMessage = prev.getResponseMessage();
def responseTime = prev.getTime(); // Response time in milliseconds
def requestUrl = prev.getURL().toString(); // Lấy URL của request
def response = prev.getResponseDataAsString().trim();

// ✅ Log thông tin cơ bản về request để hỗ trợ trace issue
log.info(requestUrl + &quot; | &quot; + responseTime + &quot;ms&quot;);

// ✅ Nếu response code != 200, log lỗi &amp; toàn bộ response để debug
if (responseCode != &quot;200&quot;) {
    log.error(&quot;❌ API Lỗi! Response Code: &quot; + responseCode + &quot; | Message: &quot; + responseMessage);
    log.error(&quot;📜 Full Response: \n&quot; + response);
    return;
}

// ✅ Parse JSON an toàn
def jsonResponse;
try {
    jsonResponse = new JsonSlurper().parseText(response);
} catch (Exception e) {
    log.error(&quot;❌ Lỗi parse JSON: &quot; + e.getMessage());
    log.error(&quot;📜 Full Response: \n&quot; + response);
    return;
}

// ✅ Trích xuất thông tin KYC
def kycStatus = jsonResponse?.payload?.kycStatus?.trim() ?: &quot;N_A&quot;;
def needsReviewCheck = jsonResponse?.payload?.needsReviewCheck ?: [];
def declinedCheck = jsonResponse?.payload?.declinedCheck ?: [];
def payload = jsonResponse?.payload ?: &quot;N_A&quot;;

// ✅ Lưu giá trị vào biến JMeter
vars.put(&quot;kycStatus&quot;, kycStatus);
vars.put(&quot;needsReviewCheck&quot;, needsReviewCheck ? needsReviewCheck.join(&quot;,&quot;) : &quot;&quot;);
vars.put(&quot;declinedCheck&quot;, declinedCheck ? declinedCheck.join(&quot;,&quot;) : &quot;&quot;);

// ✅ Ghi log Payload, Needs Review Check, Declined Check
//log.info(&quot; Payload: &quot; + payload);

// ✅ Xử lý `kycStatus` với `switch-case`
switch (kycStatus) {
    case &quot;APPROVED&quot;:
        vars.put(&quot;isTriggerFinalCheck&quot;, &quot;true&quot;);
        log.info(&quot;✅ KYC is APPROVED - Stopping current loop.&quot;);
        prev.setIgnore(); // Dừng vòng lặp hiện tại
        return;

    case &quot;DECLINED&quot;:
        log.info(&quot;❌ KYC DECLINED! Declined Check Reasons: &quot; + declinedCheck);
        prev.setIgnore();
        return;

    case &quot;NEEDS_REVIEW&quot;:
        log.info(&quot; KYC NEEDS REVIEW: &quot; + needsReviewCheck);
        if (needsReviewCheck.isEmpty()) {
            vars.put(&quot;isTriggerFinalCheck&quot;, &quot;true&quot;);
            log.info(&quot; No further review required. Triggering final check.&quot;);
        }
        break;

    default:
//        log.warn(&quot;️ KYC Status: &quot; + kycStatus + &quot; - Continuing review process.&quot;); 
//        log.info(&quot;️&quot;);
		log.info(&quot; Payload: &quot; + payload);
		// ✅ Tạm dừng trước khi kiểm tra lại
		Thread.sleep(3456);
}

//// ✅ Tăng số lần thử kiểm tra KYC
//def attempts = Integer.parseInt(vars.get(&quot;attempts&quot;) ?: &quot;0&quot;) + 1;
//vars.put(&quot;attempts&quot;, String.valueOf(attempts));

//log.info(&quot; KYC Check Attempt: &quot; + attempts);

</stringProp>
              </JSR223PostProcessor>
              <hashTree/>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If needs review" enabled="true">
              <stringProp name="IfController.condition">${__groovy(vars.get(&quot;kycStatus&quot;).equals(&quot;NEEDS_REVIEW&quot;))}</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
              <boolProp name="IfController.useExpression">true</boolProp>
            </IfController>
            <hashTree>
              <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If is not trigger final check" enabled="true">
                <stringProp name="IfController.condition">${__groovy(vars.get(&quot;isTriggerFinalCheck&quot;) == null)}</stringProp>
                <boolProp name="IfController.evaluateAll">false</boolProp>
                <boolProp name="IfController.useExpression">true</boolProp>
              </IfController>
              <hashTree>
                <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Build manual request" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script">import org.apache.jmeter.protocol.http.sampler.HTTPSamplerProxy
import org.apache.jmeter.threads.JMeterVariables
import groovy.json.JsonBuilder
import groovy.json.JsonOutput

// ✅ Hiển thị thông tin cập nhật manual review
log.info(&quot; \n 2.10.2 ---------- UPDATING MANUAL REVIEW ----------&quot;);

// ✅ Lấy giá trị `needsReviewCheck`
def needReviewStr = vars.get(&quot;needsReviewCheck&quot;)?.trim() ?: &quot;&quot;
if (needReviewStr.isEmpty()) {
    log.warn(&quot;⚠️ No checks found for manual review.&quot;);
    return;
}

// ✅ Chia `needsReviewCheck` thành danh sách
def needsReviewChecks = needReviewStr.split(&apos;,&apos;);

// ✅ Ghi log danh sách các review cần kiểm tra
log.info(&quot; Needs Review Checks: &quot; + needsReviewChecks.join(&quot;, &quot;));

// ✅ Xây dựng JSON cho manual update API
def manualUpdateBody = [:];
needsReviewChecks.each { check -&gt;
    manualUpdateBody[check] = &quot;MANUALLY_APPROVED&quot;;
}

// ✅ Chuyển đổi thành JSON đẹp để log
def manualUpdateJson = new JsonBuilder(manualUpdateBody).toPrettyString();
vars.put(&quot;manualUpdateJson&quot;, manualUpdateJson);

// ✅ Ghi log nội dung JSON manual update theo format rõ ràng
log.info(&quot; Manual Update JSON:\n&quot; + JsonOutput.prettyPrint(JsonOutput.toJson(manualUpdateBody)));</stringProp>
                </JSR223PreProcessor>
                <hashTree/>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="2.10.2 Manual Update" enabled="true">
                  <intProp name="HTTPSampler.concurrentPool">6</intProp>
                  <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                  <stringProp name="HTTPSampler.path">/v3/onboarding/admin/kyc/${onboardingId}/manual-update</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <stringProp name="HTTPSampler.method">PATCH</stringProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">${manualUpdateJson}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="x-request-id" elementType="Header">
                        <stringProp name="Header.name">x-request-id</stringProp>
                        <stringProp name="Header.value">bdb97a68-7821-4c9a-8f91-a01c23459d6c</stringProp>
                      </elementProp>
                      <elementProp name="gtw-authorization" elementType="Header">
                        <stringProp name="Header.name">gtw-authorization</stringProp>
                        <stringProp name="Header.value">Bearer ${access_token}</stringProp>
                      </elementProp>
                      <elementProp name="x-open-id" elementType="Header">
                        <stringProp name="Header.name">x-open-id</stringProp>
                        <stringProp name="Header.value">7b0e270b-c4f4-4cc4-826c-f324bd2d6684</stringProp>
                      </elementProp>
                      <elementProp name="Accept-Language" elementType="Header">
                        <stringProp name="Header.name">Accept-Language</stringProp>
                        <stringProp name="Header.value">en-GB,en-US;q=0.9,en;q=0.8</stringProp>
                      </elementProp>
                      <elementProp name="Content-Type" elementType="Header">
                        <stringProp name="Header.name">Content-Type</stringProp>
                        <stringProp name="Header.value">application/json</stringProp>
                      </elementProp>
                      <elementProp name="Accept-Encoding" elementType="Header">
                        <stringProp name="Header.name">Accept-Encoding</stringProp>
                        <stringProp name="Header.value">gzip, deflate, br</stringProp>
                      </elementProp>
                      <elementProp name="User-Agent" elementType="Header">
                        <stringProp name="Header.name">User-Agent</stringProp>
                        <stringProp name="Header.value">Vikki%20Uat/1698985660 CFNetwork/1410.0.3 Darwin/22.6.0</stringProp>
                      </elementProp>
                      <elementProp name="Accept" elementType="Header">
                        <stringProp name="Header.name">Accept</stringProp>
                        <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                      </elementProp>
                      <elementProp name="" elementType="Header">
                        <stringProp name="Header.name">x-session-id</stringProp>
                        <stringProp name="Header.value">${sessionId}</stringProp>
                      </elementProp>
                      <elementProp name="" elementType="Header">
                        <stringProp name="Header.name">OBD-Authorization</stringProp>
                        <stringProp name="Header.value">Bearer ${accessToken}</stringProp>
                      </elementProp>
                      <elementProp name="" elementType="Header">
                        <stringProp name="Header.name">X-KEY</stringProp>
                        <stringProp name="Header.value">${adminKey}</stringProp>
                      </elementProp>
                      <elementProp name="" elementType="Header">
                        <stringProp name="Header.name">username</stringProp>
                        <stringProp name="Header.value">JMETER</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                  <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor" enabled="true">
                    <stringProp name="cacheKey">true</stringProp>
                    <stringProp name="filename"></stringProp>
                    <stringProp name="parameters"></stringProp>
                    <stringProp name="script">import groovy.json.JsonSlurper;

//log.info(&quot; \n ---------- MANUAL UPDATE ----------&quot;);

// ✅ Lấy thông tin từ request trước đó
def responseCode = prev.getResponseCode();
def responseMessage = prev.getResponseMessage();
def responseTime = prev.getTime(); // Response time in milliseconds
def requestUrl = prev.getURL().toString(); // Lấy URL của request
def response = prev.getResponseDataAsString().trim();

// ✅ Log thông tin cơ bản về request để hỗ trợ trace issue
log.info(requestUrl + &quot; | &quot; + responseTime + &quot;ms&quot;);


// ✅ Nếu response code != 200, log lỗi &amp; toàn bộ response để debug
if (responseCode != &quot;200&quot;) {
    log.error(&quot;❌ API Lỗi! Response Code: &quot; + responseCode + &quot; | Message: &quot; + responseMessage);
    log.error(&quot; Full Response: \n&quot; + response);
    return;
}

// ✅ Nếu thành công, log kết quả
log.info(&quot;✅ Manual Update thành công!&quot;);</stringProp>
                    <stringProp name="scriptLanguage">groovy</stringProp>
                  </JSR223PostProcessor>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If is trigger final check" enabled="true">
                <stringProp name="IfController.condition">${__groovy(vars.get(&quot;isTriggerFinalCheck&quot;) != null &amp;&amp; vars.get(&quot;isTriggerFinalCheck&quot;).equals(&quot;true&quot;))}</stringProp>
                <boolProp name="IfController.evaluateAll">false</boolProp>
                <boolProp name="IfController.useExpression">true</boolProp>
              </IfController>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="2.10.3 Manual Final update" enabled="true">
                  <intProp name="HTTPSampler.concurrentPool">6</intProp>
                  <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                  <stringProp name="HTTPSampler.path">/v3/onboarding/admin/kyc/${onboardingId}/final-check</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <stringProp name="HTTPSampler.method">PUT</stringProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{&#xd;
	&quot;finalCheck&quot;: &quot;MANUALLY_APPROVED&quot;&#xd;
}&#xd;
</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="x-request-id" elementType="Header">
                        <stringProp name="Header.name">x-request-id</stringProp>
                        <stringProp name="Header.value">bdb97a68-7821-4c9a-8f91-a01c23459d6c</stringProp>
                      </elementProp>
                      <elementProp name="gtw-authorization" elementType="Header">
                        <stringProp name="Header.name">gtw-authorization</stringProp>
                        <stringProp name="Header.value">Bearer ${access_token}</stringProp>
                      </elementProp>
                      <elementProp name="x-open-id" elementType="Header">
                        <stringProp name="Header.name">x-open-id</stringProp>
                        <stringProp name="Header.value">7b0e270b-c4f4-4cc4-826c-f324bd2d6684</stringProp>
                      </elementProp>
                      <elementProp name="Accept-Language" elementType="Header">
                        <stringProp name="Header.name">Accept-Language</stringProp>
                        <stringProp name="Header.value">en-GB,en-US;q=0.9,en;q=0.8</stringProp>
                      </elementProp>
                      <elementProp name="Content-Type" elementType="Header">
                        <stringProp name="Header.name">Content-Type</stringProp>
                        <stringProp name="Header.value">application/json</stringProp>
                      </elementProp>
                      <elementProp name="Accept-Encoding" elementType="Header">
                        <stringProp name="Header.name">Accept-Encoding</stringProp>
                        <stringProp name="Header.value">gzip, deflate, br</stringProp>
                      </elementProp>
                      <elementProp name="User-Agent" elementType="Header">
                        <stringProp name="Header.name">User-Agent</stringProp>
                        <stringProp name="Header.value">Vikki%20Uat/1698985660 CFNetwork/1410.0.3 Darwin/22.6.0</stringProp>
                      </elementProp>
                      <elementProp name="Accept" elementType="Header">
                        <stringProp name="Header.name">Accept</stringProp>
                        <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                      </elementProp>
                      <elementProp name="" elementType="Header">
                        <stringProp name="Header.name">x-session-id</stringProp>
                        <stringProp name="Header.value">${sessionId}</stringProp>
                      </elementProp>
                      <elementProp name="" elementType="Header">
                        <stringProp name="Header.name">X-KEY</stringProp>
                        <stringProp name="Header.value">${adminKey}</stringProp>
                      </elementProp>
                      <elementProp name="" elementType="Header">
                        <stringProp name="Header.name">username</stringProp>
                        <stringProp name="Header.value">JMETER</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                  <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor" enabled="true">
                    <stringProp name="cacheKey">true</stringProp>
                    <stringProp name="filename"></stringProp>
                    <stringProp name="parameters"></stringProp>
                    <stringProp name="script">import groovy.json.JsonSlurper;

log.info(&quot; \n 2.10.3 ---------- MANUAL FINAL UPDATE ----------&quot;);

// ✅ Lấy thông tin từ request trước đó
def responseCode = prev.getResponseCode();
def responseMessage = prev.getResponseMessage();
def responseTime = prev.getTime(); // Response time in milliseconds
def requestUrl = prev.getURL().toString(); // Lấy URL của request
def response = prev.getResponseDataAsString().trim();

// ✅ Log thông tin cơ bản về request để hỗ trợ trace issue
log.info( requestUrl + &quot; | &quot; + responseTime);


// ✅ Nếu response code != 200, log lỗi &amp; toàn bộ response để debug
if (responseCode != &quot;200&quot;) {
    log.error(&quot;❌ API Lỗi! Response Code: &quot; + responseCode + &quot; | Message: &quot; + responseMessage);
    log.error(&quot; Full Response: \n&quot; + response);
    return;
}

// ✅ Nếu API thành công, chỉ log kết quả mà không cần hiển thị response đầy đủ
log.info(&quot;✅ Manual Final Update thành công!&quot;);</stringProp>
                    <stringProp name="scriptLanguage">groovy</stringProp>
                  </JSR223PostProcessor>
                  <hashTree/>
                </hashTree>
              </hashTree>
            </hashTree>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="2.11 Update Status bypass OTP" enabled="true">
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/api/config-service/v1/config/update</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
    &quot;configType&quot;: &quot;AUTHENTICATION_CONFIG&quot;,&#xd;
    &quot;key&quot;: &quot;is_account_whitelist_enabled&quot;,&#xd;
    &quot;value&quot;: &quot;true&quot;,&#xd;
    &quot;dataType&quot;: &quot;BOOLEAN&quot;,&#xd;
    &quot;scope&quot;: &quot;internal&quot;&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name"></stringProp>
                  <stringProp name="Header.value"></stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">X-KEY</stringProp>
                  <stringProp name="Header.value">${publicKey}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">import groovy.json.JsonSlurper;

log.info(&quot; \n 2.11 ---------- UPDATE STATUS BYPASS OTP ----------&quot;);

// ✅ Lấy thông tin từ request trước đó
def responseCode = prev.getResponseCode();
def responseMessage = prev.getResponseMessage();
def responseTime = prev.getTime(); // Response time in milliseconds
def requestUrl = prev.getURL().toString(); // Lấy URL của request
def response = prev.getResponseDataAsString().trim();

// ✅ Log thông tin cơ bản về request để hỗ trợ trace issue
log.info(requestUrl + &quot; | &quot; + responseTime + &quot;ms&quot;);


// ✅ Nếu response code != 200, log lỗi &amp; toàn bộ response để debug
if (responseCode != &quot;200&quot;) {
    log.error(&quot;❌ API Lỗi! Response Code: &quot; + responseCode + &quot; | Message: &quot; + responseMessage);
    log.error(&quot; Full Response: \n&quot; + response);
    return;
}

// ✅ Nếu API thành công, chỉ log kết quả mà không cần hiển thị response đầy đủ
log.info(&quot;✅ Update Status bypass OTP thành công!&quot;);</stringProp>
            </JSR223PostProcessor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="2.12 Create bypass OTP" enabled="true">
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/api/config-service/v1/config/create</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
    &quot;configType&quot;: &quot;AUTHENTICATION_CONFIG_ACCOUNT_WHITELIST&quot;,&#xd;
    &quot;key&quot;: &quot;${cifNumber}&quot;,&#xd;
    &quot;value&quot;: &quot;{\&quot;cif\&quot;:\&quot;${cifNumber}\&quot;,\&quot;otp\&quot;:\&quot;123456\&quot;,\&quot;isBypassFaceCheck\&quot;:true}&quot;,&#xd;
    &quot;dataType&quot;: &quot;JSON&quot;,&#xd;
    &quot;scope&quot;: &quot;internal&quot;&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name"></stringProp>
                  <stringProp name="Header.value"></stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">X-KEY</stringProp>
                  <stringProp name="Header.value">${publicKey}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">import groovy.json.JsonSlurper;

log.info(&quot; \n 2.12 ---------- CREATE BYPASS OTP ----------&quot;);

// ✅ Lấy thông tin từ request trước đó
def responseCode = prev.getResponseCode();
def responseMessage = prev.getResponseMessage();
def responseTime = prev.getTime(); // Response time in milliseconds
def requestUrl = prev.getURL().toString(); // Lấy URL của request
def response = prev.getResponseDataAsString().trim();

// ✅ Log thông tin cơ bản về request để hỗ trợ trace issue
log.info(requestUrl + &quot; | &quot; + responseTime + &quot;ms&quot;);


// ✅ Nếu response code != 200, log lỗi &amp; toàn bộ response để debug
if (responseCode != &quot;200&quot;) {
    log.error(&quot;❌ API Lỗi! Response Code: &quot; + responseCode + &quot; | Message: &quot; + responseMessage);
    log.error(&quot; Full Response: \n&quot; + response);
    return;
}

// ✅ Nếu API thành công, chỉ log kết quả mà không cần hiển thị response đầy đủ
log.info(&quot;✅ Create Bypass OTP thành công!&quot;);</stringProp>
            </JSR223PostProcessor>
            <hashTree/>
          </hashTree>
          <WhileController guiclass="WhileControllerGui" testclass="WhileController" testname="2.13 Check account creation status" enabled="true">
            <stringProp name="WhileController.condition">${__groovy(
    def attempts = (vars.get(&quot;attemptsCreateAccount&quot;) ?: &quot;0&quot;) as Integer;
    def status = vars.get(&quot;accountCreationStatusOnboarded&quot;) ?: &quot;UNKNOWN&quot;;

    if (attempts &gt;= 20) return false; // Giới hạn tối đa 20 lần retry
    if (status == &quot;SUCCESS&quot;) return false; // Dừng nếu thành công
    if (status == &quot;FAILED&quot;) return true; // Tiếp tục để thực hiện re-run create account

    return true; // Nếu &quot;INPROGRESS&quot;, tiếp tục vòng lặp
)}
</stringProp>
          </WhileController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="2.13.1 Get Account Creation Status" enabled="true">
              <intProp name="HTTPSampler.concurrentPool">6</intProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/v2/onboarding/accountCreation/${onboardingId}/status</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{   &#xd;
    &quot;onboardId&quot;:&quot;${onboardingId}&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="x-request-id" elementType="Header">
                    <stringProp name="Header.name">x-request-id</stringProp>
                    <stringProp name="Header.value">bdb97a68-7821-4c9a-8f91-a01c23459d6c</stringProp>
                  </elementProp>
                  <elementProp name="gtw-authorization" elementType="Header">
                    <stringProp name="Header.name">gtw-authorization</stringProp>
                    <stringProp name="Header.value">Bearer ${access_token}</stringProp>
                  </elementProp>
                  <elementProp name="x-open-id" elementType="Header">
                    <stringProp name="Header.name">x-open-id</stringProp>
                    <stringProp name="Header.value">7b0e270b-c4f4-4cc4-826c-f324bd2d6684</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Language" elementType="Header">
                    <stringProp name="Header.name">Accept-Language</stringProp>
                    <stringProp name="Header.value">en-GB,en-US;q=0.9,en;q=0.8</stringProp>
                  </elementProp>
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Encoding" elementType="Header">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip, deflate, br</stringProp>
                  </elementProp>
                  <elementProp name="User-Agent" elementType="Header">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Vikki%20Uat/1698985660 CFNetwork/1410.0.3 Darwin/22.6.0</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">X-KEY</stringProp>
                    <stringProp name="Header.value">${publicKey}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">import groovy.json.JsonSlurper;


// ✅ Tăng số lần thử kiểm tra Creation Account
def attemptsCreateAccount = Integer.parseInt(vars.get(&quot;attemptsCreateAccount&quot;) ?: &quot;0&quot;) + 1;
vars.put(&quot;attemptsCreateAccount&quot;, String.valueOf(attemptsCreateAccount));

log.info(&quot; \n 2.13.1 ---------- ACCOUNT CREATION STATUS &quot;+attemptsCreateAccount+&quot; ----------&quot;);


//log.info(&quot;🔄 Account Creation Attempt: &quot; + attemptsCreateAccount);

// ✅ Lấy thông tin từ request trước đó
def responseCode = prev.getResponseCode()?.toString();
def responseMessage = prev.getResponseMessage();
def responseTime = prev.getTime(); 
def requestUrl = prev.getURL().toString();
def response = prev.getResponseDataAsString().trim();

// ✅ Log thông tin cơ bản để debug
log.info(requestUrl + &quot; | &quot; + responseTime + &quot;ms&quot;);

// ✅ Nếu response không thành công, log lỗi &amp; tăng retry count
if (responseCode != &quot;200&quot;) {
    log.error(&quot;❌ API Lỗi! Response Code: &quot; + responseCode + &quot; | Message: &quot; + responseMessage);
    log.error(&quot; Full Response: \n&quot; + response);
    return;
}

// ✅ Parse JSON an toàn
def jsonResponse;
try {
    jsonResponse = new JsonSlurper().parseText(response);
} catch (Exception e) {
    log.error(&quot;❌ Lỗi parse JSON: &quot; + e.getMessage());
    log.error(&quot; Full Response: \n&quot; + response);
    return;
}

// ✅ Trích xuất trạng thái tạo tài khoản
def accountCreationStatusOnboarded = jsonResponse?.payload?.status?.trim() ?: &quot;UNKNOWN&quot;;
vars.put(&quot;accountCreationStatusOnboarded&quot;, accountCreationStatusOnboarded);
log.info(&quot;✅ Account creation status: &quot; + accountCreationStatusOnboarded);

// ✅ Nếu status là &quot;FAILED&quot;, lưu biến trigger cho If Controller
if (accountCreationStatusOnboarded == &quot;FAILED&quot;) {
    vars.put(&quot;triggerReRunCreateAccount&quot;, &apos;true&apos;);
    log.error(&quot;❌ Account creation FAILED.&quot;);
//    log.error(&quot;❌ Will trigger re-run after 2 minutes.&quot;);
    log.error(&quot;❌ Will trigger re-run after 2s.&quot;);
    Thread.sleep(2000);
}

// ✅ Nếu status là &quot;IN_PROGRESS&quot;, chờ trước lần thử tiếp theo
if (accountCreationStatusOnboarded == &quot;IN_PROGRESS&quot;) {
    Thread.sleep(1000);
}
</stringProp>
              </JSR223PostProcessor>
              <hashTree/>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="2.13.2 Check Account FAILED" enabled="true">
              <stringProp name="IfController.condition">${__groovy(vars.get(&apos;triggerReRunCreateAccount&apos;) == &apos;true&apos;)}</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
              <boolProp name="IfController.useExpression">true</boolProp>
            </IfController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="2.13.2 Re-running create account" enabled="true">
                <stringProp name="HTTPSampler.path">/v4/onboarding/accountCreation/internal/account</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{ &quot;onboardId&quot;: &quot;${onboardingId}&quot; }</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script">import groovy.json.JsonSlurper;

log.info(&quot; \n 2.13.2 ---------- RE-RUN CREATE ACCOUNT ----------&quot;);

// ✅ Lấy thông tin từ request trước đó
def responseCode = prev.getResponseCode();
def responseMessage = prev.getResponseMessage();
def responseTime = prev.getTime(); // Response time in milliseconds
def requestUrl = prev.getURL().toString(); // Lấy URL của request
def response = prev.getResponseDataAsString().trim();

// ✅ Log thông tin cơ bản về request để hỗ trợ trace issue
log.info(requestUrl + &quot; | &quot; + responseTime + &quot;ms&quot;);


// ✅ Nếu response code != 200, log lỗi &amp; toàn bộ response để debug
if (responseCode != &quot;200&quot;) {
    log.error(&quot;❌ API Lỗi! Response Code: &quot; + responseCode + &quot; | Message: &quot; + responseMessage);
    log.error(&quot; Full Response: \n&quot; + response);
    return;
}

// ✅ Nếu thành công, log kết quả
log.info(&quot;✅ Re-running create account thành công!&quot;);

// ✅ Reset biến `triggerReRunCreateAccount` để tránh chạy lại không cần thiết
vars.put(&quot;triggerReRunCreateAccount&quot;, &quot;false&quot;);</stringProp>
                </JSR223PostProcessor>
                <hashTree/>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="Accept" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">X-KEY</stringProp>
                      <stringProp name="Header.value">${publicKey}</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="2.14 Get Account Details - Prospect" enabled="false">
            <intProp name="HTTPSampler.concurrentPool">6</intProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/v3/onboarding/admin/prospect/${onboardingId}</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="x-request-id" elementType="Header">
                  <stringProp name="Header.name">x-request-id</stringProp>
                  <stringProp name="Header.value">dcb51815-7759-41d8-8fd6-46b32e241acf</stringProp>
                </elementProp>
                <elementProp name="gtw-authorization" elementType="Header">
                  <stringProp name="Header.name">gtw-authorization</stringProp>
                  <stringProp name="Header.value"></stringProp>
                </elementProp>
                <elementProp name="baggage" elementType="Header">
                  <stringProp name="Header.name">baggage</stringProp>
                  <stringProp name="Header.value">sentry-environment=uat,sentry-transaction=StartupScreen,sentry-public_key=a8650128baf78c0abc77876f8736238f,sentry-trace_id=ae79a0eed0354e439ab2d6820a04d617,sentry-sample_rate=0.85</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-GB,en-US;q=0.9,en;q=0.8</stringProp>
                </elementProp>
                <elementProp name="sentry-trace" elementType="Header">
                  <stringProp name="Header.name">sentry-trace</stringProp>
                  <stringProp name="Header.value">ae79a0eed0354e439ab2d6820a04d617-ae34fb51315f7476-1</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                </elementProp>
                <elementProp name="x-open-id" elementType="Header">
                  <stringProp name="Header.name">x-open-id</stringProp>
                  <stringProp name="Header.value">7b0e270b-c4f4-4cc4-826c-f324bd2d6684</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Vikki%20Uat/1698985660 CFNetwork/1410.0.3 Darwin/22.6.0</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">X-KEY</stringProp>
                  <stringProp name="Header.value">${adminKey}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">import groovy.json.JsonSlurper;

log.info(&quot; \n 2.15 ---------- GET ACCOUNT DETAILS ----------&quot;);

// ✅ Lấy thông tin từ request trước đó
def responseCode = prev.getResponseCode();
def responseMessage = prev.getResponseMessage();
def responseTime = prev.getTime(); // Response time in milliseconds
def requestUrl = prev.getURL().toString(); // Lấy URL của request
def response = prev.getResponseDataAsString().trim();

// ✅ Log thông tin cơ bản về request để hỗ trợ trace issue
log.info(requestUrl + &quot; | &quot; + responseTime + &quot;ms&quot;);


// ✅ Nếu response code != 200, log lỗi &amp; toàn bộ response để debug
if (responseCode != &quot;200&quot;) {
    log.error(&quot;❌ API Lỗi! Response Code: &quot; + responseCode + &quot; | Message: &quot; + responseMessage);
    log.error(&quot; Full Response: \n&quot; + response);
    return;
}

// ✅ Parse JSON an toàn
def jsonResponse;
try {
    jsonResponse = new JsonSlurper().parseText(response);
} catch (Exception e) {
    log.error(&quot;❌ Lỗi parse JSON: &quot; + e.getMessage());
    log.error(&quot; Full Response: \n&quot; + response);
    return;
}

try {
    log.info(&quot;\nProspect ID: &quot; + vars.get(&quot;onboardingId&quot;));

    // ✅ Trích xuất dữ liệu Prospect từ payload một cách an toàn
    def payload = jsonResponse?.payload ?: [:];

    def fullnameProspect = payload?.customerDetails?.fullName ?: &quot;N/A&quot;;
    vars.put(&quot;fullnameProspect&quot;, fullnameProspect);
    log.info(&quot;Full Name: &quot; + fullnameProspect);

    def phoneNumberProspect = payload?.phoneNumber ?: &quot;N/A&quot;;
    vars.put(&quot;phoneNumberProspect&quot;, phoneNumberProspect);
    log.info(&quot;Phone Number: &quot; + phoneNumberProspect);

    def idNumberProspect = payload?.customerDetails?.idNumber ?: &quot;N/A&quot;;
    vars.put(&quot;idNumberProspect&quot;, idNumberProspect);
    log.info(&quot;ID Number: &quot; + idNumberProspect);

    def cifNumberProspect = payload?.accountCreation?.cifNumber ?: &quot;N/A&quot;;
    vars.put(&quot;cifNumberProspect&quot;, cifNumberProspect);
    log.info(&quot;CIF Number: &quot; + cifNumberProspect);

    def vikkiAccountNumberProspect = payload?.accountCreation?.vikkiAccountNumber ?: &quot;N/A&quot;;
    vars.put(&quot;vikkiAccountNumberProspect&quot;, vikkiAccountNumberProspect);
    log.info(&quot;Vikki Account Number: &quot; + vikkiAccountNumberProspect);

    def hdbCifNumberProspect = payload?.hdb?.hdbCifNumber ?: &quot;N/A&quot;;
    vars.put(&quot;hdbCifNumberProspect&quot;, hdbCifNumberProspect);
    log.info(&quot;HDBank CIF Number: &quot; + hdbCifNumberProspect);

    def caseIDProspect = payload?.caseId ?: &quot;N/A&quot;;
    vars.put(&quot;caseIDProspect&quot;, caseIDProspect);
    log.info(&quot;Case ID: &quot; + caseIDProspect);

    log.info(&quot;\n✅ Lấy thông tin Prospect thành công! \n&quot;);

} catch (Exception e1) {
    log.error(&quot;❌ NOT FOUND YOUR INFO: &quot; + e1.getMessage());
}</stringProp>
            </JSR223PostProcessor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="2.14 Get Account Details - Write to CSV" enabled="true">
            <intProp name="HTTPSampler.concurrentPool">6</intProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/v3/onboarding/admin/prospect/${onboardingId}</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="x-request-id" elementType="Header">
                  <stringProp name="Header.name">x-request-id</stringProp>
                  <stringProp name="Header.value">dcb51815-7759-41d8-8fd6-46b32e241acf</stringProp>
                </elementProp>
                <elementProp name="gtw-authorization" elementType="Header">
                  <stringProp name="Header.name">gtw-authorization</stringProp>
                  <stringProp name="Header.value"></stringProp>
                </elementProp>
                <elementProp name="baggage" elementType="Header">
                  <stringProp name="Header.name">baggage</stringProp>
                  <stringProp name="Header.value">sentry-environment=uat,sentry-transaction=StartupScreen,sentry-public_key=a8650128baf78c0abc77876f8736238f,sentry-trace_id=ae79a0eed0354e439ab2d6820a04d617,sentry-sample_rate=0.85</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-GB,en-US;q=0.9,en;q=0.8</stringProp>
                </elementProp>
                <elementProp name="sentry-trace" elementType="Header">
                  <stringProp name="Header.name">sentry-trace</stringProp>
                  <stringProp name="Header.value">ae79a0eed0354e439ab2d6820a04d617-ae34fb51315f7476-1</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                </elementProp>
                <elementProp name="x-open-id" elementType="Header">
                  <stringProp name="Header.name">x-open-id</stringProp>
                  <stringProp name="Header.value">7b0e270b-c4f4-4cc4-826c-f324bd2d6684</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Vikki%20Uat/1698985660 CFNetwork/1410.0.3 Darwin/22.6.0</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">X-KEY</stringProp>
                  <stringProp name="Header.value">${adminKey}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">import groovy.json.JsonSlurper;
import java.io.File;
import java.io.FileWriter;
import java.io.BufferedWriter;

log.info(&quot; \n 2.15 ---------- GET ACCOUNT DETAILS ----------&quot;);

// ✅ Lấy thông tin từ request trước đó
def responseCode = prev.getResponseCode();
def responseMessage = prev.getResponseMessage();
def responseTime = prev.getTime(); // Response time in milliseconds
def requestUrl = prev.getURL().toString(); // Lấy URL của request
def response = prev.getResponseDataAsString().trim();

// ✅ Log thông tin cơ bản về request để hỗ trợ trace issue
log.info(requestUrl + &quot; | &quot; + responseTime + &quot;ms&quot;);

// ✅ Nếu response code != 200, log lỗi &amp; toàn bộ response để debug
if (responseCode != &quot;200&quot;) {
    log.error(&quot;❌ API Lỗi! Response Code: &quot; + responseCode + &quot; | Message: &quot; + responseMessage);
    log.error(&quot; Full Response: \n&quot; + response);
    return;
}

// ✅ Parse JSON an toàn
def jsonResponse;
try {
    jsonResponse = new JsonSlurper().parseText(response);
} catch (Exception e) {
    log.error(&quot;❌ Lỗi parse JSON: &quot; + e.getMessage());
    log.error(&quot; Full Response: \n&quot; + response);
    return;
}

try {
    log.info(&quot;\nProspect ID: &quot; + vars.get(&quot;onboardingId&quot;));

    // ✅ Trích xuất dữ liệu Prospect từ payload một cách an toàn
    def payload = jsonResponse?.payload ?: [:];

    def fullnameProspect = payload?.customerDetails?.fullName ?: &quot;N/A&quot;;
    vars.put(&quot;fullnameProspect&quot;, fullnameProspect);
    log.info(&quot;Full Name: &quot; + fullnameProspect);

    def phoneNumberProspect = payload?.phoneNumber ?: &quot;N/A&quot;;
    vars.put(&quot;phoneNumberProspect&quot;, phoneNumberProspect);
    log.info(&quot;Phone Number: &quot; + phoneNumberProspect);

    def idNumberProspect = payload?.customerDetails?.idNumber ?: &quot;N/A&quot;;
    vars.put(&quot;idNumberProspect&quot;, idNumberProspect);
    log.info(&quot;ID Number: &quot; + idNumberProspect);

    def cifNumberProspect = payload?.accountCreation?.cifNumber ?: &quot;N/A&quot;;
    vars.put(&quot;cifNumberProspect&quot;, cifNumberProspect);
    log.info(&quot;CIF Number: &quot; + cifNumberProspect);

    def vikkiAccountNumberProspect = payload?.accountCreation?.vikkiAccountNumber ?: &quot;N/A&quot;;
    vars.put(&quot;vikkiAccountNumberProspect&quot;, vikkiAccountNumberProspect);
    log.info(&quot;Vikki Account Number: &quot; + vikkiAccountNumberProspect);

    def hdbCifNumberProspect = payload?.hdb?.hdbCifNumber ?: &quot;N/A&quot;;
    vars.put(&quot;hdbCifNumberProspect&quot;, hdbCifNumberProspect);
    log.info(&quot;HDBank CIF Number: &quot; + hdbCifNumberProspect);

    def caseIDProspect = payload?.caseId ?: &quot;N/A&quot;;
    vars.put(&quot;caseIDProspect&quot;, caseIDProspect);
    log.info(&quot;Case ID: &quot; + caseIDProspect);

    log.info(&quot;\n✅ Lấy thông tin Prospect thành công! \n&quot;);

    // ✅ Ghi thông tin vào file CSV
    def filePath = &quot;${__BeanShell(import org.apache.jmeter.services.FileServer; FileServer.getFileServer().getBaseDir();)}/${__BeanShell(File.separator,)}/prospect_data.csv&quot;;
    def file = new File(filePath);

    // Kiểm tra nếu file không tồn tại, tạo mới và thêm header
    if (!file.exists()) {
        file.createNewFile();
        file.append(&quot;Prospect ID, Full Name, Phone Number, ID Number, CIF Number, Vikki Account Number, HDBank CIF Number, Case ID, Response Time (ms), Request URL\n&quot;);
    }

    // Ghi dữ liệu vào file CSV
    def data = &quot;${vars.get(&quot;onboardingId&quot;)}, ${fullnameProspect}, ${phoneNumberProspect}, ${idNumberProspect}, ${cifNumberProspect}, ${vikkiAccountNumberProspect}, ${hdbCifNumberProspect}, ${caseIDProspect}, ${responseTime}, ${requestUrl}\n&quot;;
    file.append(data);

} catch (Exception e1) {
    log.error(&quot;❌ NOT FOUND YOUR INFO: &quot; + e1.getMessage());
}</stringProp>
            </JSR223PostProcessor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[MOCK] Hyperverge OCR - Delete" enabled="true">
            <stringProp name="HTTPSampler.domain">wiremock.sit.galaxyfinx.in</stringProp>
            <stringProp name="HTTPSampler.path">__admin/mappings/${idHyperVergeOCRNew}</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">DELETE</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">import groovy.json.JsonSlurper

log.info(&quot;\n ----- DELETE [MOCK] HYPERVERGE OCR -----&quot;)

// ✅ Lấy thông tin từ request trước đó
def response = prev.getResponseDataAsString()?.trim()  // Đảm bảo response không null
def responseCode = prev.getResponseCode()?.toString()  // Lấy mã trạng thái response
def responseMessage = prev.getResponseMessage()  // Lấy thông điệp response
def responseTime = prev.getTime()  // Lấy thời gian phản hồi

// ✅ Log thông tin cơ bản của request
log.info(&quot;Request URL: ${prev.getURL()} | ${responseTime}ms&quot;)

// ✅ Kiểm tra nếu response code khác 201 (DELETE thành công trả về 201)
if (responseCode != &quot;200&quot;) {
    log.error(&quot;❌ API Error! Response Code: ${responseCode} | Message: ${responseMessage}&quot;)
    log.error(&quot;Full Response: \n${response}&quot;)
    return
}

// ✅ Parse JSON an toàn
def jsonResponse
try {
    jsonResponse = new JsonSlurper().parseText(response)  // Parse response JSON
} catch (Exception e) {
    log.error(&quot;❌ JSON Parsing Error: ${e.message}&quot;)
    log.error(&quot;Full Response: \n${response}&quot;)
    return
}

// ✅ Log kết quả thành công
def idHyperVergeOCRNew = vars.get(&quot;idHyperVergeOCRNew&quot;) ?: &quot;N/A&quot;  // Lấy ID mock OCR từ biến JMeter (nếu có)
log.info(&quot;✅ Delete Mock HyperVerge successful: ${idHyperVergeOCRNew}&quot;)
</stringProp>
            </JSR223PostProcessor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="2.15 Up vKYC" enabled="false">
            <stringProp name="HTTPSampler.path">/v2/onboarding/admin/kyc/video</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
    &quot;cifNumber&quot;: &quot;${cifNumber}&quot;,&#xd;
    &quot;videoCaseId&quot;: &quot;&quot;,&#xd;
    &quot;status&quot;: &quot;PASS&quot;,&#xd;
    &quot;caseType&quot;: &quot;LIMIT_VKYC&quot;&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="x-request-id" elementType="Header">
                  <stringProp name="Header.name">x-request-id</stringProp>
                  <stringProp name="Header.value">dcb51815-7759-41d8-8fd6-46b32e241acf</stringProp>
                </elementProp>
                <elementProp name="gtw-authorization" elementType="Header">
                  <stringProp name="Header.name">gtw-authorization</stringProp>
                  <stringProp name="Header.value"></stringProp>
                </elementProp>
                <elementProp name="baggage" elementType="Header">
                  <stringProp name="Header.name">baggage</stringProp>
                  <stringProp name="Header.value">sentry-environment=uat,sentry-transaction=StartupScreen,sentry-public_key=a8650128baf78c0abc77876f8736238f,sentry-trace_id=ae79a0eed0354e439ab2d6820a04d617,sentry-sample_rate=0.85</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-GB,en-US;q=0.9,en;q=0.8</stringProp>
                </elementProp>
                <elementProp name="sentry-trace" elementType="Header">
                  <stringProp name="Header.name">sentry-trace</stringProp>
                  <stringProp name="Header.value">ae79a0eed0354e439ab2d6820a04d617-ae34fb51315f7476-1</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                </elementProp>
                <elementProp name="x-open-id" elementType="Header">
                  <stringProp name="Header.name">x-open-id</stringProp>
                  <stringProp name="Header.value">7b0e270b-c4f4-4cc4-826c-f324bd2d6684</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Vikki%20Uat/1698985660 CFNetwork/1410.0.3 Darwin/22.6.0</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">X-KEY</stringProp>
                  <stringProp name="Header.value">${adminKey}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">import groovy.json.JsonSlurper;

log.info(&quot; \n 2.14 ---------- UP vKYC ----------&quot;);

// ✅ Lấy thông tin từ request trước đó
def responseCode = prev.getResponseCode();
def responseMessage = prev.getResponseMessage();
def responseTime = prev.getTime(); // Response time in milliseconds
def requestUrl = prev.getURL().toString(); // Lấy URL của request
def response = prev.getResponseDataAsString().trim();

// ✅ Log thông tin cơ bản về request để hỗ trợ trace issue
log.info(requestUrl + &quot; | &quot; + responseTime + &quot;ms&quot;);


// ✅ Nếu response code != 200, log lỗi &amp; toàn bộ response để debug
if (responseCode != &quot;200&quot;) {
    log.error(&quot;❌ API Lỗi! Response Code: &quot; + responseCode + &quot; | Message: &quot; + responseMessage);
    log.error(&quot; Full Response: \n&quot; + response);
    return;
}

// ✅ Nếu API thành công, chỉ log kết quả mà không cần hiển thị response đầy đủ
log.info(&quot;✅ Up vKYC thành công!&quot;);</stringProp>
            </JSR223PostProcessor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Incoming transaction from HDB" enabled="false">
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="false">
              <stringProp name="scriptLanguage">beanshell</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">import javax.crypto.Mac
import javax.crypto.spec.SecretKeySpec
import org.apache.commons.codec.binary.Base64
import groovy.json.JsonOutput

// 🔹 Tạo timestamp
def current = new Date()
def timestamp = current.format(&quot;yyyy-MM-dd&apos;T&apos;HH:mm:ss.SSS&apos;Z&apos;&quot;)
log.info(&quot;timestamp: &quot; + timestamp)
vars.put(&quot;timestamp&quot;, timestamp)

// 🔹 Tạo refNo (random số 12 chữ số)
def refNo = (Math.abs(new Random().nextLong()) % 900000000000) + 100000000000
log.info(&quot;refNo: &quot; + refNo)
vars.put(&quot;refNo&quot;, refNo.toString())

// 🔹 Set giá trị tài khoản
def vikkiAccountNumberProspect = &quot;880679145&quot;  // Thay bằng biến môi trường nếu cần

// 🔹 Chuẩn bị body JSON (format chuẩn)
def body = JsonOutput.toJson([
    amount: 490000000,
    refNo: vars.get(&quot;refNo&quot;),
    currency: &quot;VND&quot;,
    transmissionDatevars.get(&quot;timestamp&quot;),
    fromAccount: &quot;0421000487800&quot;,
    fromAccountName: &quot;ADECCO HR Vietnam&quot;,
    toAccount: vikkiAccountNumberProspect,
    contentTransfers: &quot;FinX Bonus&quot;,
    timestamp: vars.get(&quot;timestamp&quot;)
])

log.info(&quot;Request Body: &quot; + body)
vars.put(&quot;requestBody&quot;, body)

// 🔹 Chuẩn bị raw string để ký (giữ nguyên format như Postman)
def raw = vars.get(&quot;timestamp&quot;) + &quot;POST&quot; + &quot;/api/payment-integration/v1/hdb/transaction&quot; + body
log.info(&quot;Raw String to Sign: &quot; + raw)
vars.put(&quot;rawString&quot;, raw)

// 🔹 Ký HMAC-SHA256 + Encode Base64
def secret = &quot;th6r+5hgK+X+Tt9J&quot;  // Thay bằng giá trị thật nếu cần
Mac sha256_HMAC = Mac.getInstance(&quot;HmacSHA256&quot;)
SecretKeySpec secret_key = new SecretKeySpec(secret.getBytes(&quot;UTF-8&quot;), &quot;HmacSHA256&quot;)
sha256_HMAC.init(secret_key)

byte[] hash = sha256_HMAC.doFinal(raw.getBytes(&quot;UTF-8&quot;))
String signature = Base64.encodeBase64String(hash)

log.info(&quot;Generated X-Payload-Signature: &quot; + signature)
vars.put(&quot;signature&quot;, signature)
</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="false">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name"></stringProp>
                  <stringProp name="Header.value"></stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">X-KEY</stringProp>
                  <stringProp name="Header.value">GfS39omUfRHReT3G02sSYTIpF</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">X-Payload-Signature</stringProp>
                  <stringProp name="Header.value">${signature}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
        </hashTree>
      </hashTree>
      <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
      <ResultCollector guiclass="TableVisualizer" testclass="ResultCollector" testname="View Results in Table" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
