#!/bin/bash

# C·∫•u h√¨nh ƒë∆∞·ªùng d·∫´n
JMETER_HOME="/Users/conghoang/apache-jmeter-5.6.3-backup-xlsx/bin"
TEST_PLAN="/Users/conghoang/Desktop/vikki-journey/Test_Whitelist_Auto_Unlink/vikki-journey-conghoang-qa-test-whitelist.jmx"
LOGS_FOLDER="/Users/conghoang/Desktop/logs"
SLACK_WEBHOOK_URL="https://hooks.slack.com/services/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"

# Ghi nh·∫≠n th·ªùi gian b·∫Øt ƒë·∫ßu
START_TIMESTAMP=$(date +%s)
START_TIME_FORMATTED=$(date -r "$START_TIMESTAMP" "+%Y-%m-%d %H:%M:%S" 2>/dev/null || date -d "@$START_TIMESTAMP" "+%Y-%m-%d %H:%M:%S")

# Ch·∫°y JMeter
cd "$JMETER_HOME" || { echo "‚ùå Kh√¥ng th·ªÉ v√†o th∆∞ m·ª•c JMeter!"; exit 1; }
chmod +x jmeter.sh
mkdir -p "$LOGS_FOLDER"
LOG_FILE="$LOGS_FOLDER/jmeter.log"

# B·∫Øt ƒë·∫ßu theo d√µi log theo th·ªùi gian th·ª±c
tail -f "$LOG_FILE" &  # Th√™m l·ªánh n√†y ƒë·ªÉ xem log th·ªùi gian th·ª±c
TAIL_PID=$!  # L∆∞u PID c·ªßa tail ƒë·ªÉ c√≥ th·ªÉ d·ª´ng sau khi test xong

# Ch·∫°y JMeter
./jmeter.sh -n -t "$TEST_PLAN" -j "$LOG_FILE" &
JMETER_PID=$!
wait $JMETER_PID
EXIT_CODE=$?

# D·ª´ng theo d√µi log khi test k·∫øt th√∫c
kill $TAIL_PID  # D·ª´ng tail khi test xong

# Ki·ªÉm tra n·∫øu c√≥ l·ªói th·ª±c s·ª± (d√≤ng c√≥ ch·ª©a [ERROR] trong log)
ERROR_FOUND=$(grep "\[ERROR\]" "$LOG_FILE" | wc -l)

# N·∫øu c√≥ l·ªói, g·ª≠i th√¥ng b√°o t·ªõi Slack
if [ "$ERROR_FOUND" -gt 0 ] || [ "$EXIT_CODE" -ne 0 ]; then
    # Ghi nh·∫≠n th·ªùi gian k·∫øt th√∫c
    END_TIMESTAMP=$(date +%s)
    DURATION=$((END_TIMESTAMP - START_TIMESTAMP))
    DURATION_FORMATTED=$(printf "%02d:%02d" $((DURATION/60)) $((DURATION%60)))
    
    # L·ªçc th√¥ng tin t·ª´ file log
    LOG_INFO=$(grep "INFO" "$LOG_FILE" | grep -Ev "Thread is done|Thread finished|Notifying test listeners|summary \+|summary =" | tail -n 10 | awk '{print "- " $0}' | sed ':a;N;$!ba;s/\n/\\n/g')

    # L·ªçc c√°c l·ªói th·ª±c s·ª± (d√≤ng c√≥ ch·ª©a [ERROR])
    ERROR_LOGS=$(grep "\[ERROR\]" "$LOG_FILE" | tail -n 10)

    # L·ªçc chi ti·∫øt l·ªói (full response)
    ERROR_DETAILS=$(grep -A 5 "\[ERROR\]" "$LOG_FILE" | grep "Full Response:" -A 5 | sed ':a;N;$!ba;s/\n/\\n/g')

    # Ki·ªÉm tra l·ªói timeout ho·∫∑c l·ªói k·∫øt n·ªëi
    TIMEOUT_ERROR=$(grep -i "timeout" "$LOG_FILE" || echo "No Timeout error found")
    CONNECTION_ERROR=$(grep -i "connection" "$LOG_FILE" || echo "No Connection error found")

    # T·∫°o message JSON cho Slack
    MESSAGE=$(jq -n --arg status "‚ùå *JMeter Test Failed!*" --arg duration "$DURATION_FORMATTED" --arg startTime "$START_TIME_FORMATTED" --arg logFile "$LOG_FILE" --arg logInfo "$LOG_INFO" --arg errorLogs "$ERROR_LOGS" --arg errorDetails "$ERROR_DETAILS" --arg timeoutError "$TIMEOUT_ERROR" --arg connectionError "$CONNECTION_ERROR" --arg color "#ff0000" '{
      "attachments": [
        {
          "color": $color,
          "blocks": [
            { "type": "section", "text": { "type": "mrkdwn", "text": "üöÄ *JMeter Test Report*" } },
            { "type": "section", "fields": [
                { "type": "mrkdwn", "text": "*Status:* \($status)" },
                { "type": "mrkdwn", "text": "*Start Time:* \($startTime // "N/A")" },
                { "type": "mrkdwn", "text": "*Total Time:* \($duration)" }
            ] },
            { "type": "section", "text": { "type": "mrkdwn", "text": "üìÑ *JMeter Log File:* \n\($logFile)" } },
            { "type": "section", "text": { "type": "mrkdwn", "text": "üìù *Info Logs:* \n\($logInfo)" } },
            { "type": "section", "text": { "type": "mrkdwn", "text": "‚ùó *Error Logs:* \n\($errorLogs)" } },
            { "type": "section", "text": { "type": "mrkdwn", "text": "‚ö†Ô∏è *Error Details:* \n\($errorDetails)" } },
            { "type": "section", "text": { "type": "mrkdwn", "text": "‚è±Ô∏è *Timeout Errors:* \n\($timeoutError)" } },
            { "type": "section", "text": { "type": "mrkdwn", "text": "üîó *Connection Errors:* \n\($connectionError)" } }
          ]
        }
      ]
    }')

    # G·ª≠i b√°o c√°o t·ªõi Slack
    RESPONSE=$(curl -s -o /dev/null -w "%{http_code}" -X POST -H 'Content-type: application/json' --data "$MESSAGE" "$SLACK_WEBHOOK_URL")

    # Ki·ªÉm tra ph·∫£n h·ªìi t·ª´ Slack
    if [ "$RESPONSE" -ne 200 ]; then
        echo "‚ùå G·ª≠i th√¥ng b√°o Slack th·∫•t b·∫°i! M√£ l·ªói HTTP: $RESPONSE"
    else
        echo "‚úÖ ƒê√£ g·ª≠i th√¥ng b√°o l√™n Slack th√†nh c√¥ng!"
    fi
fi
